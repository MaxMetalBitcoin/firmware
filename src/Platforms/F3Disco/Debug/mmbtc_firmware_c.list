
mmbtc_firmware_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b38  08005b38  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005b38  08005b38  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b38  08005b38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001b30  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ba4  20001ba4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bf95  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003859  00000000  00000000  0003c039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0003f898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001320  00000000  00000000  00040d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000363b  00000000  00000000  00042050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018dbe  00000000  00000000  0004568b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3c49  00000000  00000000  0005e449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00122092  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000592c  00000000  00000000  001220e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a40 	.word	0x08005a40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005a40 	.word	0x08005a40

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 fac2 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f81c 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f8f4 	bl	80003c8 <MX_GPIO_Init>
  MX_CRC_Init();
 80001e0:	f000 f86c 	bl	80002bc <MX_CRC_Init>
  MX_RTC_Init();
 80001e4:	f000 f88c 	bl	8000300 <MX_RTC_Init>
  MX_SPI1_Init();
 80001e8:	f000 f8b0 	bl	800034c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001ec:	f002 fdb4 	bl	8002d58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f0:	4a05      	ldr	r2, [pc, #20]	; (8000208 <main+0x38>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <main+0x3c>)
 80001f6:	f002 fe17 	bl	8002e28 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <main+0x40>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000200:	f002 fdde 	bl	8002dc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	e7fe      	b.n	8000204 <main+0x34>
 8000206:	bf00      	nop
 8000208:	08005a7c 	.word	0x08005a7c
 800020c:	08000449 	.word	0x08000449
 8000210:	20001a5c 	.word	0x20001a5c

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b09e      	sub	sp, #120	; 0x78
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f005 fb3e 	bl	80058a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	223c      	movs	r2, #60	; 0x3c
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f005 fb30 	bl	80058a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000244:	230a      	movs	r3, #10
 8000246:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024c:	2310      	movs	r3, #16
 800024e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fe2b 	bl	8000eb8 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000268:	f000 f910 	bl	800048c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000270:	2300      	movs	r3, #0
 8000272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000280:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fd1e 	bl	8001cc8 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000292:	f000 f8fb 	bl	800048c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800029c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002a0:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	463b      	mov	r3, r7
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 ff55 	bl	8002154 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002b0:	f000 f8ec 	bl	800048c <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3778      	adds	r7, #120	; 0x78
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <MX_CRC_Init+0x3c>)
 80002c2:	4a0e      	ldr	r2, [pc, #56]	; (80002fc <MX_CRC_Init+0x40>)
 80002c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_CRC_Init+0x3c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <MX_CRC_Init+0x3c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_CRC_Init+0x3c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80002d8:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <MX_CRC_Init+0x3c>)
 80002da:	2200      	movs	r2, #0
 80002dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_CRC_Init+0x3c>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002e4:	4804      	ldr	r0, [pc, #16]	; (80002f8 <MX_CRC_Init+0x3c>)
 80002e6:	f000 fb51 	bl	800098c <HAL_CRC_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80002f0:	f000 f8cc 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20001a60 	.word	0x20001a60
 80002fc:	40023000 	.word	0x40023000

08000300 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_RTC_Init+0x44>)
 8000306:	4a10      	ldr	r2, [pc, #64]	; (8000348 <MX_RTC_Init+0x48>)
 8000308:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_RTC_Init+0x44>)
 800030c:	2200      	movs	r2, #0
 800030e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_RTC_Init+0x44>)
 8000312:	227f      	movs	r2, #127	; 0x7f
 8000314:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_RTC_Init+0x44>)
 8000318:	22ff      	movs	r2, #255	; 0xff
 800031a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_RTC_Init+0x44>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_RTC_Init+0x44>)
 8000324:	2200      	movs	r2, #0
 8000326:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_RTC_Init+0x44>)
 800032a:	2200      	movs	r2, #0
 800032c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_RTC_Init+0x44>)
 8000330:	f002 f8c0 	bl	80024b4 <HAL_RTC_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800033a:	f000 f8a7 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20001a84 	.word	0x20001a84
 8000348:	40002800 	.word	0x40002800

0800034c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_SPI1_Init+0x74>)
 8000352:	4a1c      	ldr	r2, [pc, #112]	; (80003c4 <MX_SPI1_Init+0x78>)
 8000354:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <MX_SPI1_Init+0x74>)
 8000358:	f44f 7282 	mov.w	r2, #260	; 0x104
 800035c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_SPI1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <MX_SPI1_Init+0x74>)
 8000366:	f44f 7240 	mov.w	r2, #768	; 0x300
 800036a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_SPI1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000372:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <MX_SPI1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_SPI1_Init+0x74>)
 800037a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800037e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_SPI1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_SPI1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_SPI1_Init+0x74>)
 800038e:	2200      	movs	r2, #0
 8000390:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <MX_SPI1_Init+0x74>)
 8000394:	2200      	movs	r2, #0
 8000396:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000398:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_SPI1_Init+0x74>)
 800039a:	2207      	movs	r2, #7
 800039c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <MX_SPI1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_SPI1_Init+0x74>)
 80003a6:	2208      	movs	r2, #8
 80003a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_SPI1_Init+0x74>)
 80003ac:	f002 f967 	bl	800267e <HAL_SPI_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003b6:	f000 f869 	bl	800048c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20001aa4 	.word	0x20001aa4
 80003c4:	40013000 	.word	0x40013000

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ce:	f107 030c 	add.w	r3, r7, #12
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <MX_GPIO_Init+0x78>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a17      	ldr	r2, [pc, #92]	; (8000440 <MX_GPIO_Init+0x78>)
 80003e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b15      	ldr	r3, [pc, #84]	; (8000440 <MX_GPIO_Init+0x78>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003f2:	60bb      	str	r3, [r7, #8]
 80003f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_GPIO_Init+0x78>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <MX_GPIO_Init+0x78>)
 80003fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_GPIO_Init+0x78>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <MX_GPIO_Init+0x7c>)
 8000416:	f000 fd1d 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800041a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800041e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000420:	2301      	movs	r3, #1
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800042c:	f107 030c 	add.w	r3, r7, #12
 8000430:	4619      	mov	r1, r3
 8000432:	4804      	ldr	r0, [pc, #16]	; (8000444 <MX_GPIO_Init+0x7c>)
 8000434:	f000 fb94 	bl	8000b60 <HAL_GPIO_Init>

}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	48001000 	.word	0x48001000

08000448 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 8000450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <StartDefaultTask+0x1c>)
 8000456:	f000 fd15 	bl	8000e84 <HAL_GPIO_TogglePin>
	  osDelay(500);
 800045a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800045e:	f002 fd8d 	bl	8002f7c <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 8000462:	e7f5      	b.n	8000450 <StartDefaultTask+0x8>
 8000464:	48001000 	.word	0x48001000

08000468 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d101      	bne.n	800047e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800047a:	f000 f985 	bl	8000788 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40001000 	.word	0x40001000

0800048c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000494:	e7fe      	b.n	8000494 <Error_Handler+0x8>
	...

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <HAL_MspInit+0x4c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a10      	ldr	r2, [pc, #64]	; (80004e4 <HAL_MspInit+0x4c>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <HAL_MspInit+0x4c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <HAL_MspInit+0x4c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <HAL_MspInit+0x4c>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_MspInit+0x4c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	210f      	movs	r1, #15
 80004d2:	f06f 0001 	mvn.w	r0, #1
 80004d6:	f000 fa2f 	bl	8000938 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <HAL_CRC_MspInit+0x38>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d10b      	bne.n	8000512 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <HAL_CRC_MspInit+0x3c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a09      	ldr	r2, [pc, #36]	; (8000524 <HAL_CRC_MspInit+0x3c>)
 8000500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <HAL_CRC_MspInit+0x3c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40023000 	.word	0x40023000
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <HAL_RTC_MspInit+0x44>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d111      	bne.n	800055e <HAL_RTC_MspInit+0x36>
 800053a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800053e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	fa93 f3a3 	rbit	r3, r3
 8000546:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000548:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800054a:	fab3 f383 	clz	r3, r3
 800054e:	b2db      	uxtb	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <HAL_RTC_MspInit+0x48>)
 8000554:	4413      	add	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	461a      	mov	r2, r3
 800055a:	2301      	movs	r3, #1
 800055c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40002800 	.word	0x40002800
 8000570:	10908100 	.word	0x10908100

08000574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <HAL_SPI_MspInit+0x7c>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d128      	bne.n	80005e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_SPI_MspInit+0x80>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <HAL_SPI_MspInit+0x80>)
 800059c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_SPI_MspInit+0x80>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_SPI_MspInit+0x80>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <HAL_SPI_MspInit+0x80>)
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_SPI_MspInit+0x80>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005c6:	23e0      	movs	r3, #224	; 0xe0
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d2:	2303      	movs	r3, #3
 80005d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005d6:	2305      	movs	r3, #5
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f000 fabc 	bl	8000b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	3728      	adds	r7, #40	; 0x28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40013000 	.word	0x40013000
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08c      	sub	sp, #48	; 0x30
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	2036      	movs	r0, #54	; 0x36
 800060e:	f000 f993 	bl	8000938 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000612:	2036      	movs	r0, #54	; 0x36
 8000614:	f000 f9ac 	bl	8000970 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <HAL_InitTick+0x9c>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <HAL_InitTick+0x9c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	61d3      	str	r3, [r2, #28]
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <HAL_InitTick+0x9c>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	f003 0310 	and.w	r3, r3, #16
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000630:	f107 0210 	add.w	r2, r7, #16
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fd58 	bl	80020f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000640:	f001 fd34 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8000644:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_InitTick+0xa0>)
 800064a:	fba2 2303 	umull	r2, r3, r2, r3
 800064e:	0c9b      	lsrs	r3, r3, #18
 8000650:	3b01      	subs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <HAL_InitTick+0xa4>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <HAL_InitTick+0xa8>)
 8000658:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <HAL_InitTick+0xa4>)
 800065c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000660:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_InitTick+0xa4>)
 8000664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000666:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_InitTick+0xa4>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <HAL_InitTick+0xa4>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <HAL_InitTick+0xa4>)
 8000676:	f002 f8ad 	bl	80027d4 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d104      	bne.n	800068a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000680:	4806      	ldr	r0, [pc, #24]	; (800069c <HAL_InitTick+0xa4>)
 8000682:	f002 f909 	bl	8002898 <HAL_TIM_Base_Start_IT>
 8000686:	4603      	mov	r3, r0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3730      	adds	r7, #48	; 0x30
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	431bde83 	.word	0x431bde83
 800069c:	20001b08 	.word	0x20001b08
 80006a0:	40001000 	.word	0x40001000

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <NMI_Handler+0x4>

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <MemManage_Handler+0x4>

080006b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <TIM6_DAC_IRQHandler+0x10>)
 80006d6:	f002 f949 	bl	800296c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20001b08 	.word	0x20001b08

080006e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <SystemInit+0x20>)
 80006ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <SystemInit+0x20>)
 80006f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490e      	ldr	r1, [pc, #56]	; (8000748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0b      	ldr	r4, [pc, #44]	; (8000754 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000732:	f7ff ffd7 	bl	80006e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000736:	f005 f881 	bl	800583c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073a:	f7ff fd49 	bl	80001d0 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000740:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800074c:	08005b40 	.word	0x08005b40
  ldr r2, =_sbss
 8000750:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000754:	20001ba4 	.word	0x20001ba4

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f8d8 	bl	8000922 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	200f      	movs	r0, #15
 8000774:	f7ff ff40 	bl	80005f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff fe8e 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x20>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <HAL_IncTick+0x24>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_IncTick+0x24>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20001b54 	.word	0x20001b54

080007b0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007b4:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <HAL_GetTick+0x14>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20001b54 	.word	0x20001b54

080007c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e4:	4013      	ands	r3, r2
 80007e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <__NVIC_SetPriorityGrouping+0x44>)
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	60d3      	str	r3, [r2, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_GetPriorityGrouping+0x18>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	f003 0307 	and.w	r3, r3, #7
}
 800081e:	4618      	mov	r0, r3
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0b      	blt.n	8000856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4907      	ldr	r1, [pc, #28]	; (8000864 <__NVIC_EnableIRQ+0x38>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000e100 	.word	0xe000e100

08000868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db0a      	blt.n	8000892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	490c      	ldr	r1, [pc, #48]	; (80008b4 <__NVIC_SetPriority+0x4c>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	440b      	add	r3, r1
 800088c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000890:	e00a      	b.n	80008a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4908      	ldr	r1, [pc, #32]	; (80008b8 <__NVIC_SetPriority+0x50>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	3b04      	subs	r3, #4
 80008a0:	0112      	lsls	r2, r2, #4
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	440b      	add	r3, r1
 80008a6:	761a      	strb	r2, [r3, #24]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	f1c3 0307 	rsb	r3, r3, #7
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	bf28      	it	cs
 80008da:	2304      	movcs	r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3304      	adds	r3, #4
 80008e2:	2b06      	cmp	r3, #6
 80008e4:	d902      	bls.n	80008ec <NVIC_EncodePriority+0x30>
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3b03      	subs	r3, #3
 80008ea:	e000      	b.n	80008ee <NVIC_EncodePriority+0x32>
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43da      	mvns	r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	401a      	ands	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	43d9      	mvns	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	4313      	orrs	r3, r2
         );
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	; 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ff4c 	bl	80007c8 <__NVIC_SetPriorityGrouping>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800094a:	f7ff ff61 	bl	8000810 <__NVIC_GetPriorityGrouping>
 800094e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	68b9      	ldr	r1, [r7, #8]
 8000954:	6978      	ldr	r0, [r7, #20]
 8000956:	f7ff ffb1 	bl	80008bc <NVIC_EncodePriority>
 800095a:	4602      	mov	r2, r0
 800095c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff80 	bl	8000868 <__NVIC_SetPriority>
}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff54 	bl	800082c <__NVIC_EnableIRQ>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d101      	bne.n	800099e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e054      	b.n	8000a48 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	7f5b      	ldrb	r3, [r3, #29]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d105      	bne.n	80009b4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fd9a 	bl	80004e8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2202      	movs	r2, #2
 80009b8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	791b      	ldrb	r3, [r3, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10c      	bne.n	80009dc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <HAL_CRC_Init+0xc4>)
 80009c8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 0218 	bic.w	r2, r2, #24
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	e00c      	b.n	80009f6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6899      	ldr	r1, [r3, #8]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	461a      	mov	r2, r3
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f834 	bl	8000a54 <HAL_CRCEx_Polynomial_Set>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e028      	b.n	8000a48 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	795b      	ldrb	r3, [r3, #5]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d105      	bne.n	8000a0a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a06:	611a      	str	r2, [r3, #16]
 8000a08:	e004      	b.n	8000a14 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	6912      	ldr	r2, [r2, #16]
 8000a12:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	430a      	orrs	r2, r1
 8000a28:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	699a      	ldr	r2, [r3, #24]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2201      	movs	r2, #1
 8000a44:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	04c11db7 	.word	0x04c11db7

08000a54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000a64:	231f      	movs	r3, #31
 8000a66:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000a68:	bf00      	nop
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	1e5a      	subs	r2, r3, #1
 8000a6e:	613a      	str	r2, [r7, #16]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d009      	beq.n	8000a88 <HAL_CRCEx_Polynomial_Set+0x34>
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0f0      	beq.n	8000a6a <HAL_CRCEx_Polynomial_Set+0x16>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2b18      	cmp	r3, #24
 8000a8c:	d846      	bhi.n	8000b1c <HAL_CRCEx_Polynomial_Set+0xc8>
 8000a8e:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000b23 	.word	0x08000b23
 8000a98:	08000b1d 	.word	0x08000b1d
 8000a9c:	08000b1d 	.word	0x08000b1d
 8000aa0:	08000b1d 	.word	0x08000b1d
 8000aa4:	08000b1d 	.word	0x08000b1d
 8000aa8:	08000b1d 	.word	0x08000b1d
 8000aac:	08000b1d 	.word	0x08000b1d
 8000ab0:	08000b1d 	.word	0x08000b1d
 8000ab4:	08000b11 	.word	0x08000b11
 8000ab8:	08000b1d 	.word	0x08000b1d
 8000abc:	08000b1d 	.word	0x08000b1d
 8000ac0:	08000b1d 	.word	0x08000b1d
 8000ac4:	08000b1d 	.word	0x08000b1d
 8000ac8:	08000b1d 	.word	0x08000b1d
 8000acc:	08000b1d 	.word	0x08000b1d
 8000ad0:	08000b1d 	.word	0x08000b1d
 8000ad4:	08000b05 	.word	0x08000b05
 8000ad8:	08000b1d 	.word	0x08000b1d
 8000adc:	08000b1d 	.word	0x08000b1d
 8000ae0:	08000b1d 	.word	0x08000b1d
 8000ae4:	08000b1d 	.word	0x08000b1d
 8000ae8:	08000b1d 	.word	0x08000b1d
 8000aec:	08000b1d 	.word	0x08000b1d
 8000af0:	08000b1d 	.word	0x08000b1d
 8000af4:	08000af9 	.word	0x08000af9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d913      	bls.n	8000b26 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b02:	e010      	b.n	8000b26 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	2b07      	cmp	r3, #7
 8000b08:	d90f      	bls.n	8000b2a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b0e:	e00c      	b.n	8000b2a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	2b0f      	cmp	r3, #15
 8000b14:	d90b      	bls.n	8000b2e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b1a:	e008      	b.n	8000b2e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8000b20:	e006      	b.n	8000b30 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b22:	bf00      	nop
 8000b24:	e004      	b.n	8000b30 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b26:	bf00      	nop
 8000b28:	e002      	b.n	8000b30 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b2a:	bf00      	nop
 8000b2c:	e000      	b.n	8000b30 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b2e:	bf00      	nop
  }
  if (status == HAL_OK)
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10d      	bne.n	8000b52 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f023 0118 	bic.w	r1, r3, #24
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	371c      	adds	r7, #28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	e154      	b.n	8000e1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 8146 	beq.w	8000e14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <HAL_GPIO_Init+0x40>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 0201 	and.w	r2, r3, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d017      	beq.n	8000c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d123      	bne.n	8000c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	08da      	lsrs	r2, r3, #3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3208      	adds	r2, #8
 8000c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	220f      	movs	r2, #15
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	691a      	ldr	r2, [r3, #16]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	6939      	ldr	r1, [r7, #16]
 8000c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0203 	and.w	r2, r3, #3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80a0 	beq.w	8000e14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd4:	4b58      	ldr	r3, [pc, #352]	; (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a57      	ldr	r2, [pc, #348]	; (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cec:	4a53      	ldr	r2, [pc, #332]	; (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d16:	d019      	beq.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a49      	ldr	r2, [pc, #292]	; (8000e40 <HAL_GPIO_Init+0x2e0>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d013      	beq.n	8000d48 <HAL_GPIO_Init+0x1e8>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a48      	ldr	r2, [pc, #288]	; (8000e44 <HAL_GPIO_Init+0x2e4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00d      	beq.n	8000d44 <HAL_GPIO_Init+0x1e4>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a47      	ldr	r2, [pc, #284]	; (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0x1e0>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a46      	ldr	r2, [pc, #280]	; (8000e4c <HAL_GPIO_Init+0x2ec>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d101      	bne.n	8000d3c <HAL_GPIO_Init+0x1dc>
 8000d38:	2304      	movs	r3, #4
 8000d3a:	e008      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	e006      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d40:	2303      	movs	r3, #3
 8000d42:	e004      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e002      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <HAL_GPIO_Init+0x1ee>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	f002 0203 	and.w	r2, r2, #3
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	4093      	lsls	r3, r2
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d5e:	4937      	ldr	r1, [pc, #220]	; (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d6c:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d90:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dba:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fa22 f303 	lsr.w	r3, r2, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f47f aea3 	bne.w	8000b70 <HAL_GPIO_Init+0x10>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	bf00      	nop
 8000e2e:	371c      	adds	r7, #28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	48000400 	.word	0x48000400
 8000e44:	48000800 	.word	0x48000800
 8000e48:	48000c00 	.word	0x48000c00
 8000e4c:	48001000 	.word	0x48001000
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	041a      	lsls	r2, r3, #16
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43d9      	mvns	r1, r3
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	400b      	ands	r3, r1
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	f000 bef4 	b.w	8001cba <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 816a 	beq.w	80011b6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ee2:	4bb3      	ldr	r3, [pc, #716]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d00c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eee:	4bb0      	ldr	r3, [pc, #704]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d159      	bne.n	8000fae <HAL_RCC_OscConfig+0xf6>
 8000efa:	4bad      	ldr	r3, [pc, #692]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f06:	d152      	bne.n	8000fae <HAL_RCC_OscConfig+0xf6>
 8000f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f10:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f14:	fa93 f3a3 	rbit	r3, r3
 8000f18:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8000f1c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f20:	fab3 f383 	clz	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d102      	bne.n	8000f3a <HAL_RCC_OscConfig+0x82>
 8000f34:	4b9e      	ldr	r3, [pc, #632]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	e015      	b.n	8000f66 <HAL_RCC_OscConfig+0xae>
 8000f3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f42:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f52:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f56:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f5a:	fa93 f3a3 	rbit	r3, r3
 8000f5e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f62:	4b93      	ldr	r3, [pc, #588]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f6a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f6e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f72:	fa92 f2a2 	rbit	r2, r2
 8000f76:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f7a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f7e:	fab2 f282 	clz	r2, r2
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	f042 0220 	orr.w	r2, r2, #32
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	f002 021f 	and.w	r2, r2, #31
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 810c 	beq.w	80011b4 <HAL_RCC_OscConfig+0x2fc>
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 8106 	bne.w	80011b4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f000 be86 	b.w	8001cba <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb8:	d106      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x110>
 8000fba:	4b7d      	ldr	r3, [pc, #500]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7c      	ldr	r2, [pc, #496]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e030      	b.n	800102a <HAL_RCC_OscConfig+0x172>
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x134>
 8000fd2:	4b77      	ldr	r3, [pc, #476]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a76      	ldr	r2, [pc, #472]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b74      	ldr	r3, [pc, #464]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a73      	ldr	r2, [pc, #460]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e01e      	b.n	800102a <HAL_RCC_OscConfig+0x172>
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff6:	d10c      	bne.n	8001012 <HAL_RCC_OscConfig+0x15a>
 8000ff8:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a6c      	ldr	r2, [pc, #432]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8000ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b6a      	ldr	r3, [pc, #424]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a69      	ldr	r2, [pc, #420]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 800100a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e00b      	b.n	800102a <HAL_RCC_OscConfig+0x172>
 8001012:	4b67      	ldr	r3, [pc, #412]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a66      	ldr	r2, [pc, #408]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b64      	ldr	r3, [pc, #400]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a63      	ldr	r2, [pc, #396]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800102a:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	f023 020f 	bic.w	r2, r3, #15
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	495d      	ldr	r1, [pc, #372]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 800103a:	4313      	orrs	r3, r2
 800103c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d059      	beq.n	80010fc <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fbb2 	bl	80007b0 <HAL_GetTick>
 800104c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001052:	f7ff fbad 	bl	80007b0 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d902      	bls.n	8001068 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	f000 be29 	b.w	8001cba <HAL_RCC_OscConfig+0xe02>
 8001068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800107c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b01      	cmp	r3, #1
 8001092:	d102      	bne.n	800109a <HAL_RCC_OscConfig+0x1e2>
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	e015      	b.n	80010c6 <HAL_RCC_OscConfig+0x20e>
 800109a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800109e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010b6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010d2:	fa92 f2a2 	rbit	r2, r2
 80010d6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010da:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	f002 021f 	and.w	r2, r2, #31
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0ab      	beq.n	8001052 <HAL_RCC_OscConfig+0x19a>
 80010fa:	e05c      	b.n	80011b6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fb58 	bl	80007b0 <HAL_GetTick>
 8001100:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001106:	f7ff fb53 	bl	80007b0 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d902      	bls.n	800111c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	f000 bdcf 	b.w	8001cba <HAL_RCC_OscConfig+0xe02>
 800111c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001120:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001130:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001134:	fab3 f383 	clz	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b01      	cmp	r3, #1
 8001146:	d102      	bne.n	800114e <HAL_RCC_OscConfig+0x296>
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x2c2>
 800114e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001152:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001162:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001166:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800116a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_RCC_OscConfig+0x2f8>)
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800117e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001182:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001186:	fa92 f2a2 	rbit	r2, r2
 800118a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800118e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001192:	fab2 f282 	clz	r2, r2
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	f042 0220 	orr.w	r2, r2, #32
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	f002 021f 	and.w	r2, r2, #31
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f202 	lsl.w	r2, r1, r2
 80011a8:	4013      	ands	r3, r2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ab      	bne.n	8001106 <HAL_RCC_OscConfig+0x24e>
 80011ae:	e002      	b.n	80011b6 <HAL_RCC_OscConfig+0x2fe>
 80011b0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 816f 	beq.w	80014a4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011c6:	4bd0      	ldr	r3, [pc, #832]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011d2:	4bcd      	ldr	r3, [pc, #820]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d16c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x400>
 80011de:	4bca      	ldr	r3, [pc, #808]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d166      	bne.n	80012b8 <HAL_RCC_OscConfig+0x400>
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d102      	bne.n	800121a <HAL_RCC_OscConfig+0x362>
 8001214:	4bbc      	ldr	r3, [pc, #752]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	e013      	b.n	8001242 <HAL_RCC_OscConfig+0x38a>
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001232:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800123e:	4bb2      	ldr	r3, [pc, #712]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	2202      	movs	r2, #2
 8001244:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001248:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800124c:	fa92 f2a2 	rbit	r2, r2
 8001250:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001254:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001258:	fab2 f282 	clz	r2, r2
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	f042 0220 	orr.w	r2, r2, #32
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	f002 021f 	and.w	r2, r2, #31
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <HAL_RCC_OscConfig+0x3cc>
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d002      	beq.n	8001284 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	f000 bd1b 	b.w	8001cba <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4ba0      	ldr	r3, [pc, #640]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	21f8      	movs	r1, #248	; 0xf8
 8001294:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001298:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800129c:	fa91 f1a1 	rbit	r1, r1
 80012a0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012a4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012a8:	fab1 f181 	clz	r1, r1
 80012ac:	b2c9      	uxtb	r1, r1
 80012ae:	408b      	lsls	r3, r1
 80012b0:	4995      	ldr	r1, [pc, #596]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e0f5      	b.n	80014a4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8085 	beq.w	80013ce <HAL_RCC_OscConfig+0x516>
 80012c4:	2301      	movs	r3, #1
 80012c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	461a      	mov	r2, r3
 80012ec:	2301      	movs	r3, #1
 80012ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fa5e 	bl	80007b0 <HAL_GetTick>
 80012f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f8:	e00a      	b.n	8001310 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fa59 	bl	80007b0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d902      	bls.n	8001310 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	f000 bcd5 	b.w	8001cba <HAL_RCC_OscConfig+0xe02>
 8001310:	2302      	movs	r3, #2
 8001312:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001322:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	095b      	lsrs	r3, r3, #5
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x488>
 800133a:	4b73      	ldr	r3, [pc, #460]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	e013      	b.n	8001368 <HAL_RCC_OscConfig+0x4b0>
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001358:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001364:	4b68      	ldr	r3, [pc, #416]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2202      	movs	r2, #2
 800136a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800136e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001372:	fa92 f2a2 	rbit	r2, r2
 8001376:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800137a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800137e:	fab2 f282 	clz	r2, r2
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	f042 0220 	orr.w	r2, r2, #32
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	f002 021f 	and.w	r2, r2, #31
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0af      	beq.n	80012fa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	21f8      	movs	r1, #248	; 0xf8
 80013aa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013b2:	fa91 f1a1 	rbit	r1, r1
 80013b6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013ba:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013be:	fab1 f181 	clz	r1, r1
 80013c2:	b2c9      	uxtb	r1, r1
 80013c4:	408b      	lsls	r3, r1
 80013c6:	4950      	ldr	r1, [pc, #320]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e06a      	b.n	80014a4 <HAL_RCC_OscConfig+0x5ec>
 80013ce:	2301      	movs	r3, #1
 80013d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e4:	fab3 f383 	clz	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	461a      	mov	r2, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff f9d9 	bl	80007b0 <HAL_GetTick>
 80013fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e00a      	b.n	800141a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff f9d4 	bl	80007b0 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d902      	bls.n	800141a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	f000 bc50 	b.w	8001cba <HAL_RCC_OscConfig+0xe02>
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800142c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d102      	bne.n	800144a <HAL_RCC_OscConfig+0x592>
 8001444:	4b30      	ldr	r3, [pc, #192]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	e013      	b.n	8001472 <HAL_RCC_OscConfig+0x5ba>
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001454:	fa93 f3a3 	rbit	r3, r3
 8001458:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800145c:	2302      	movs	r3, #2
 800145e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001462:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001466:	fa93 f3a3 	rbit	r3, r3
 800146a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_RCC_OscConfig+0x650>)
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	2202      	movs	r2, #2
 8001474:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001478:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800147c:	fa92 f2a2 	rbit	r2, r2
 8001480:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001484:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001488:	fab2 f282 	clz	r2, r2
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	f042 0220 	orr.w	r2, r2, #32
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	f002 021f 	and.w	r2, r2, #31
 8001498:	2101      	movs	r1, #1
 800149a:	fa01 f202 	lsl.w	r2, r1, r2
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1af      	bne.n	8001404 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80da 	beq.w	8001668 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d069      	beq.n	8001592 <HAL_RCC_OscConfig+0x6da>
 80014be:	2301      	movs	r3, #1
 80014c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_RCC_OscConfig+0x654>)
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	2301      	movs	r3, #1
 80014e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e8:	f7ff f962 	bl	80007b0 <HAL_GetTick>
 80014ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f0:	e00e      	b.n	8001510 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff f95d 	bl	80007b0 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d906      	bls.n	8001510 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e3d9      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	10908120 	.word	0x10908120
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001522:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001526:	2202      	movs	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fa93 f2a3 	rbit	r2, r3
 8001534:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800153e:	2202      	movs	r2, #2
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001550:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	4ba5      	ldr	r3, [pc, #660]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001556:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800155a:	2102      	movs	r1, #2
 800155c:	6019      	str	r1, [r3, #0]
 800155e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fa93 f1a3 	rbit	r1, r3
 8001568:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800156c:	6019      	str	r1, [r3, #0]
  return result;
 800156e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	fab3 f383 	clz	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0b0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x63a>
 8001590:	e06a      	b.n	8001668 <HAL_RCC_OscConfig+0x7b0>
 8001592:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	fa93 f2a3 	rbit	r2, r3
 80015a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015a8:	601a      	str	r2, [r3, #0]
  return result;
 80015aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b0:	fab3 f383 	clz	r3, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b8c      	ldr	r3, [pc, #560]	; (80017ec <HAL_RCC_OscConfig+0x934>)
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	461a      	mov	r2, r3
 80015c0:	2300      	movs	r3, #0
 80015c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c4:	f7ff f8f4 	bl	80007b0 <HAL_GetTick>
 80015c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015cc:	e009      	b.n	80015e2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ce:	f7ff f8ef 	bl	80007b0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e36b      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
 80015e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015e6:	2202      	movs	r2, #2
 80015e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	fa93 f2a3 	rbit	r2, r3
 80015f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015fe:	2202      	movs	r2, #2
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	fa93 f2a3 	rbit	r2, r3
 800160c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001628:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162a:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 800162c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800162e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001632:	2102      	movs	r1, #2
 8001634:	6019      	str	r1, [r3, #0]
 8001636:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f1a3 	rbit	r1, r3
 8001640:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001644:	6019      	str	r1, [r3, #0]
  return result;
 8001646:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001656:	b2db      	uxtb	r3, r3
 8001658:	f003 031f 	and.w	r3, r3, #31
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1b2      	bne.n	80015ce <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8158 	beq.w	8001928 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b5a      	ldr	r3, [pc, #360]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d112      	bne.n	80016b0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	4b57      	ldr	r3, [pc, #348]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	4a56      	ldr	r2, [pc, #344]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	61d3      	str	r3, [r2, #28]
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f107 0308 	add.w	r3, r7, #8
 80016a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016aa:	2301      	movs	r3, #1
 80016ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	4b4f      	ldr	r3, [pc, #316]	; (80017f0 <HAL_RCC_OscConfig+0x938>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d11a      	bne.n	80016f2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016bc:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <HAL_RCC_OscConfig+0x938>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_RCC_OscConfig+0x938>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c8:	f7ff f872 	bl	80007b0 <HAL_GetTick>
 80016cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d0:	e009      	b.n	80016e6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d2:	f7ff f86d 	bl	80007b0 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e2e9      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b42      	ldr	r3, [pc, #264]	; (80017f0 <HAL_RCC_OscConfig+0x938>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ef      	beq.n	80016d2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x852>
 80016fc:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a39      	ldr	r2, [pc, #228]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	e02f      	b.n	800176a <HAL_RCC_OscConfig+0x8b2>
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10c      	bne.n	800172e <HAL_RCC_OscConfig+0x876>
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a33      	ldr	r2, [pc, #204]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001726:	f023 0304 	bic.w	r3, r3, #4
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	e01d      	b.n	800176a <HAL_RCC_OscConfig+0x8b2>
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x89a>
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a2a      	ldr	r2, [pc, #168]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a27      	ldr	r2, [pc, #156]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x8b2>
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a24      	ldr	r2, [pc, #144]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d06b      	beq.n	800184c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001774:	f7ff f81c 	bl	80007b0 <HAL_GetTick>
 8001778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	e00b      	b.n	8001796 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7ff f817 	bl	80007b0 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	; 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e291      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
 8001796:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800179a:	2202      	movs	r2, #2
 800179c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f2a3 	rbit	r2, r3
 80017a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017b2:	2202      	movs	r2, #2
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017c4:	601a      	str	r2, [r3, #0]
  return result;
 80017c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80017ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d109      	bne.n	80017f4 <HAL_RCC_OscConfig+0x93c>
 80017e0:	4b01      	ldr	r3, [pc, #4]	; (80017e8 <HAL_RCC_OscConfig+0x930>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x958>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	10908120 	.word	0x10908120
 80017f0:	40007000 	.word	0x40007000
 80017f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80017f8:	2202      	movs	r2, #2
 80017fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	4bbb      	ldr	r3, [pc, #748]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001814:	2102      	movs	r1, #2
 8001816:	6011      	str	r1, [r2, #0]
 8001818:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	fa92 f1a2 	rbit	r1, r2
 8001822:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001826:	6011      	str	r1, [r2, #0]
  return result;
 8001828:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800182c:	6812      	ldr	r2, [r2, #0]
 800182e:	fab2 f282 	clz	r2, r2
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f002 021f 	and.w	r2, r2, #31
 800183e:	2101      	movs	r1, #1
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d099      	beq.n	800177e <HAL_RCC_OscConfig+0x8c6>
 800184a:	e063      	b.n	8001914 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7fe ffb0 	bl	80007b0 <HAL_GetTick>
 8001850:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	e00b      	b.n	800186e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7fe ffab 	bl	80007b0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e225      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
 800186e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001872:	2202      	movs	r2, #2
 8001874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800188a:	2202      	movs	r2, #2
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800189c:	601a      	str	r2, [r3, #0]
  return result;
 800189e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d102      	bne.n	80018be <HAL_RCC_OscConfig+0xa06>
 80018b8:	4b90      	ldr	r3, [pc, #576]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	e00d      	b.n	80018da <HAL_RCC_OscConfig+0xa22>
 80018be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018c2:	2202      	movs	r2, #2
 80018c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	fa93 f2a3 	rbit	r2, r3
 80018d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	4b89      	ldr	r3, [pc, #548]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018de:	2102      	movs	r1, #2
 80018e0:	6011      	str	r1, [r2, #0]
 80018e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	fa92 f1a2 	rbit	r1, r2
 80018ec:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80018f0:	6011      	str	r1, [r2, #0]
  return result;
 80018f2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	fab2 f282 	clz	r2, r2
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	f002 021f 	and.w	r2, r2, #31
 8001908:	2101      	movs	r1, #1
 800190a:	fa01 f202 	lsl.w	r2, r1, r2
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1a0      	bne.n	8001856 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001914:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191c:	4b77      	ldr	r3, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	4a76      	ldr	r2, [pc, #472]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 8001922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001926:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 81c2 	beq.w	8001cb8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001934:	4b71      	ldr	r3, [pc, #452]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	f000 819c 	beq.w	8001c7a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f040 8114 	bne.w	8001b76 <HAL_RCC_OscConfig+0xcbe>
 800194e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001952:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001956:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001966:	601a      	str	r2, [r3, #0]
  return result;
 8001968:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800196c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001978:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	461a      	mov	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7fe ff14 	bl	80007b0 <HAL_GetTick>
 8001988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	e009      	b.n	80019a2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198e:	f7fe ff0f 	bl	80007b0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e18b      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
 80019a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	fa93 f2a3 	rbit	r2, r3
 80019b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ba:	601a      	str	r2, [r3, #0]
  return result;
 80019bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c2:	fab3 f383 	clz	r3, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	095b      	lsrs	r3, r3, #5
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d102      	bne.n	80019dc <HAL_RCC_OscConfig+0xb24>
 80019d6:	4b49      	ldr	r3, [pc, #292]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	e01b      	b.n	8001a14 <HAL_RCC_OscConfig+0xb5c>
 80019dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a1c:	6011      	str	r1, [r2, #0]
 8001a1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	fa92 f1a2 	rbit	r1, r2
 8001a28:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a2c:	6011      	str	r1, [r2, #0]
  return result;
 8001a2e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0220 	orr.w	r2, r2, #32
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d19e      	bne.n	800198e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	430b      	orrs	r3, r1
 8001a66:	4925      	ldr	r1, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
 8001a6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fa93 f2a3 	rbit	r2, r3
 8001a80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a84:	601a      	str	r2, [r3, #0]
  return result;
 8001a86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a8a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7fe fe85 	bl	80007b0 <HAL_GetTick>
 8001aa6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aaa:	e009      	b.n	8001ac0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aac:	f7fe fe80 	bl	80007b0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e0fc      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
 8001ac0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fa93 f2a3 	rbit	r2, r3
 8001ad4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ad8:	601a      	str	r2, [r3, #0]
  return result;
 8001ada:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ade:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0xc48>
 8001af4:	4b01      	ldr	r3, [pc, #4]	; (8001afc <HAL_RCC_OscConfig+0xc44>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	e01e      	b.n	8001b38 <HAL_RCC_OscConfig+0xc80>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fa93 f2a3 	rbit	r2, r3
 8001b14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fa93 f2a3 	rbit	r2, r3
 8001b2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <HAL_RCC_OscConfig+0xe0c>)
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b40:	6011      	str	r1, [r2, #0]
 8001b42:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	fa92 f1a2 	rbit	r1, r2
 8001b4c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b50:	6011      	str	r1, [r2, #0]
  return result;
 8001b52:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fab2 f282 	clz	r2, r2
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d09b      	beq.n	8001aac <HAL_RCC_OscConfig+0xbf4>
 8001b74:	e0a0      	b.n	8001cb8 <HAL_RCC_OscConfig+0xe00>
 8001b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8e:	601a      	str	r2, [r3, #0]
  return result;
 8001b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ba0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7fe fe00 	bl	80007b0 <HAL_GetTick>
 8001bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb4:	e009      	b.n	8001bca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7fe fdfb 	bl	80007b0 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e077      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
 8001bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	601a      	str	r2, [r3, #0]
  return result;
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bea:	fab3 f383 	clz	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	095b      	lsrs	r3, r3, #5
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_RCC_OscConfig+0xd4c>
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_RCC_OscConfig+0xe0c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	e01b      	b.n	8001c3c <HAL_RCC_OscConfig+0xd84>
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f107 0320 	add.w	r3, r7, #32
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	fa93 f2a3 	rbit	r2, r3
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f107 0318 	add.w	r3, r7, #24
 8001c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_RCC_OscConfig+0xe0c>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f107 0210 	add.w	r2, r7, #16
 8001c40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c44:	6011      	str	r1, [r2, #0]
 8001c46:	f107 0210 	add.w	r2, r7, #16
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	fa92 f1a2 	rbit	r1, r2
 8001c50:	f107 020c 	add.w	r2, r7, #12
 8001c54:	6011      	str	r1, [r2, #0]
  return result;
 8001c56:	f107 020c 	add.w	r2, r7, #12
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d19e      	bne.n	8001bb6 <HAL_RCC_OscConfig+0xcfe>
 8001c78:	e01e      	b.n	8001cb8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e018      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_RCC_OscConfig+0xe0c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ca2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b09e      	sub	sp, #120	; 0x78
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e162      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b90      	ldr	r3, [pc, #576]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d910      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b8d      	ldr	r3, [pc, #564]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0207 	bic.w	r2, r3, #7
 8001cf6:	498b      	ldr	r1, [pc, #556]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b89      	ldr	r3, [pc, #548]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e14a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1c:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	497f      	ldr	r1, [pc, #508]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 80dc 	beq.w	8001ef4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d13c      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xf6>
 8001d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d54:	fab3 f383 	clz	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d102      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xa6>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	e00f      	b.n	8001d8e <HAL_RCC_ClockConfig+0xc6>
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d80:	663b      	str	r3, [r7, #96]	; 0x60
 8001d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d96:	fa92 f2a2 	rbit	r2, r2
 8001d9a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001d9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d17b      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0f3      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d13c      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x178>
 8001dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x128>
 8001dea:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_ClockConfig+0x148>
 8001df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8001dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
 8001e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e14:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e18:	fa92 f2a2 	rbit	r2, r2
 8001e1c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e20:	fab2 f282 	clz	r2, r2
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f002 021f 	and.w	r2, r2, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d13a      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b2      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
 8001e40:	2302      	movs	r3, #2
 8001e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	095b      	lsrs	r3, r3, #5
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e00d      	b.n	8001e84 <HAL_RCC_ClockConfig+0x1bc>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2202      	movs	r2, #2
 8001e86:	61ba      	str	r2, [r7, #24]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	fa92 f2a2 	rbit	r2, r2
 8001e8e:	617a      	str	r2, [r7, #20]
  return result;
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	fab2 f282 	clz	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f042 0220 	orr.w	r2, r2, #32
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	f002 021f 	and.w	r2, r2, #31
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e079      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	491a      	ldr	r1, [pc, #104]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fc74 	bl	80007b0 <HAL_GetTick>
 8001ec8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe fc70 	bl	80007b0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e061      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_ClockConfig+0x260>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d214      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	4906      	ldr	r1, [pc, #24]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCC_ClockConfig+0x25c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e040      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x2de>
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f56:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4912      	ldr	r1, [pc, #72]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f6a:	f000 f829 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f6e:	4601      	mov	r1, r0
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f78:	22f0      	movs	r2, #240	; 0xf0
 8001f7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	60fa      	str	r2, [r7, #12]
  return result;
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	40d3      	lsrs	r3, r2
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x2ec>)
 8001f90:	5cd3      	ldrb	r3, [r2, r3]
 8001f92:	fa21 f303 	lsr.w	r3, r1, r3
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <HAL_RCC_ClockConfig+0x2f0>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_RCC_ClockConfig+0x2f4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fb2a 	bl	80005f8 <HAL_InitTick>
  
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3778      	adds	r7, #120	; 0x78
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08005aa0 	.word	0x08005aa0
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b08b      	sub	sp, #44	; 0x2c
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8001fee:	e03c      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ff2:	623b      	str	r3, [r7, #32]
      break;
 8001ff4:	e03c      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001ffc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002000:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	fa92 f2a2 	rbit	r2, r2
 8002008:	607a      	str	r2, [r7, #4]
  return result;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	40d3      	lsrs	r3, r2
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_GetSysClockFreq+0xc0>)
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	220f      	movs	r2, #15
 8002024:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	fa92 f2a2 	rbit	r2, r2
 800202c:	60fa      	str	r2, [r7, #12]
  return result;
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <HAL_RCC_GetSysClockFreq+0xcc>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002048:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e004      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <HAL_RCC_GetSysClockFreq+0xd0>)
 800205e:	fb02 f303 	mul.w	r3, r2, r3
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	623b      	str	r3, [r7, #32]
      break;
 8002068:	e002      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_RCC_GetSysClockFreq+0xc4>)
 800206c:	623b      	str	r3, [r7, #32]
      break;
 800206e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002070:	6a3b      	ldr	r3, [r7, #32]
}
 8002072:	4618      	mov	r0, r3
 8002074:	372c      	adds	r7, #44	; 0x2c
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	007a1200 	.word	0x007a1200
 8002088:	08005ab8 	.word	0x08005ab8
 800208c:	08005ac8 	.word	0x08005ac8
 8002090:	003d0900 	.word	0x003d0900

08002094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020b2:	f7ff ffef 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b6:	4601      	mov	r1, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	603a      	str	r2, [r7, #0]
  return result;
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	40d3      	lsrs	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08005ab0 	.word	0x08005ab0

080020f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	220f      	movs	r2, #15
 80020fe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_RCC_GetClockConfig+0x60>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0207 	and.w	r2, r3, #7
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	40022000 	.word	0x40022000

08002154 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b092      	sub	sp, #72	; 0x48
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80d4 	beq.w	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002178:	4b4e      	ldr	r3, [pc, #312]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10e      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	4a4a      	ldr	r2, [pc, #296]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	61d3      	str	r3, [r2, #28]
 8002190:	4b48      	ldr	r3, [pc, #288]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219c:	2301      	movs	r3, #1
 800219e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b45      	ldr	r3, [pc, #276]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ae:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a41      	ldr	r2, [pc, #260]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7fe faf9 	bl	80007b0 <HAL_GetTick>
 80021be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	e008      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7fe faf5 	bl	80007b0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	; 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e169      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e0:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8084 	beq.w	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d07c      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800220a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	461a      	mov	r2, r3
 800222a:	2301      	movs	r3, #1
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002232:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	461a      	mov	r2, r3
 800224e:	2300      	movs	r3, #0
 8002250:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002252:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002256:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d04b      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe faa5 	bl	80007b0 <HAL_GetTick>
 8002266:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe faa1 	bl	80007b0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e113      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002280:	2302      	movs	r3, #2
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	61fb      	str	r3, [r7, #28]
  return result;
 8002298:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d108      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022ae:	4b01      	ldr	r3, [pc, #4]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	e00d      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40007000 	.word	0x40007000
 80022bc:	10908100 	.word	0x10908100
 80022c0:	2302      	movs	r3, #2
 80022c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	4b78      	ldr	r3, [pc, #480]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2202      	movs	r2, #2
 80022d2:	613a      	str	r2, [r7, #16]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	60fa      	str	r2, [r7, #12]
  return result;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	fab2 f282 	clz	r2, r2
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f002 021f 	and.w	r2, r2, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0b7      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022fa:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	496a      	ldr	r1, [pc, #424]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002308:	4313      	orrs	r3, r2
 800230a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800230c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002310:	2b01      	cmp	r3, #1
 8002312:	d105      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002314:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	4a65      	ldr	r2, [pc, #404]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800231a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800232c:	4b60      	ldr	r3, [pc, #384]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f023 0203 	bic.w	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	495d      	ldr	r1, [pc, #372]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800233a:	4313      	orrs	r3, r2
 800233c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800234a:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	4956      	ldr	r1, [pc, #344]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002358:	4313      	orrs	r3, r2
 800235a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002368:	4b51      	ldr	r3, [pc, #324]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	494e      	ldr	r1, [pc, #312]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002376:	4313      	orrs	r3, r2
 8002378:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0320 	and.w	r3, r3, #32
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f023 0210 	bic.w	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4947      	ldr	r1, [pc, #284]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002394:	4313      	orrs	r3, r2
 8002396:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023a4:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	493f      	ldr	r1, [pc, #252]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f023 0220 	bic.w	r2, r3, #32
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4938      	ldr	r1, [pc, #224]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023e0:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4930      	ldr	r1, [pc, #192]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023fe:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	4929      	ldr	r1, [pc, #164]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240c:	4313      	orrs	r3, r2
 800240e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	4921      	ldr	r1, [pc, #132]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	491a      	ldr	r1, [pc, #104]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	4912      	ldr	r1, [pc, #72]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002466:	4313      	orrs	r3, r2
 8002468:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	490b      	ldr	r1, [pc, #44]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3748      	adds	r7, #72	; 0x48
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e083      	b.n	80025ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7f5b      	ldrb	r3, [r3, #29]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe f826 	bl	8000528 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	22ca      	movs	r2, #202	; 0xca
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2253      	movs	r2, #83	; 0x53
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f897 	bl	8002626 <RTC_EnterInitMode>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2204      	movs	r2, #4
 800250a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e05e      	b.n	80025ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800251e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002522:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	041a      	lsls	r2, r3, #16
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10e      	bne.n	800259c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f829 	bl	80025d6 <HAL_RTC_WaitForSynchro>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	22ff      	movs	r2, #255	; 0xff
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e018      	b.n	80025ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	22ff      	movs	r2, #255	; 0xff
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025f0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80025f2:	f7fe f8dd 	bl	80007b0 <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80025f8:	e009      	b.n	800260e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025fa:	f7fe f8d9 	bl	80007b0 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002608:	d901      	bls.n	800260e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e007      	b.n	800261e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ee      	beq.n	80025fa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d119      	bne.n	8002674 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002648:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800264a:	f7fe f8b1 	bl	80007b0 <HAL_GetTick>
 800264e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002650:	e009      	b.n	8002666 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002652:	f7fe f8ad 	bl	80007b0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002660:	d901      	bls.n	8002666 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e007      	b.n	8002676 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ee      	beq.n	8002652 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e09d      	b.n	80027cc <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	2b00      	cmp	r3, #0
 8002696:	d108      	bne.n	80026aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026a0:	d009      	beq.n	80026b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	61da      	str	r2, [r3, #28]
 80026a8:	e005      	b.n	80026b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7fd ff4f 	bl	8000574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026f6:	d902      	bls.n	80026fe <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e002      	b.n	8002704 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002702:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800270c:	d007      	beq.n	800271e <HAL_SPI_Init+0xa0>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002716:	d002      	beq.n	800271e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	ea42 0103 	orr.w	r1, r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0204 	and.w	r2, r3, #4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800279a:	ea42 0103 	orr.w	r1, r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e049      	b.n	800287a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f841 	bl	8002882 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f000 f9f2 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d001      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e04a      	b.n	8002946 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a21      	ldr	r2, [pc, #132]	; (8002954 <HAL_TIM_Base_Start_IT+0xbc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d018      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028da:	d013      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_TIM_Base_Start_IT+0xc0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00e      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_TIM_Base_Start_IT+0xc4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d009      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_TIM_Base_Start_IT+0xc8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x6c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_TIM_Base_Start_IT+0xcc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d115      	bne.n	8002930 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <HAL_TIM_Base_Start_IT+0xd0>)
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d015      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0xaa>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d011      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	e008      	b.n	8002942 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	e000      	b.n	8002944 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002942:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40012c00 	.word	0x40012c00
 8002958:	40000400 	.word	0x40000400
 800295c:	40000800 	.word	0x40000800
 8002960:	40013400 	.word	0x40013400
 8002964:	40014000 	.word	0x40014000
 8002968:	00010007 	.word	0x00010007

0800296c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d122      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b02      	cmp	r3, #2
 800298e:	d11b      	bne.n	80029c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0202 	mvn.w	r2, #2
 8002998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f905 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 80029b4:	e005      	b.n	80029c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f8f7 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f908 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d122      	bne.n	8002a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d11b      	bne.n	8002a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0204 	mvn.w	r2, #4
 80029ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f8db 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f8cd 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f8de 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d122      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d11b      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0208 	mvn.w	r2, #8
 8002a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2204      	movs	r2, #4
 8002a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f8b1 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 8002a5c:	e005      	b.n	8002a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8a3 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8b4 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b10      	cmp	r3, #16
 8002a7c:	d122      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d11b      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f06f 0210 	mvn.w	r2, #16
 8002a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f887 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e005      	b.n	8002abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f879 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f88a 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d10e      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d107      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0201 	mvn.w	r2, #1
 8002ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fd fcbc 	bl	8000468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	2b80      	cmp	r3, #128	; 0x80
 8002afc:	d10e      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b80      	cmp	r3, #128	; 0x80
 8002b0a:	d107      	bne.n	8002b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f90a 	bl	8002d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b2a:	d10e      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b80      	cmp	r3, #128	; 0x80
 8002b38:	d107      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8fd 	bl	8002d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d10e      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d107      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f838 	bl	8002be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d10e      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d107      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0220 	mvn.w	r2, #32
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f8bd 	bl	8002d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a3c      	ldr	r2, [pc, #240]	; (8002d00 <TIM_Base_SetConfig+0x104>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00f      	beq.n	8002c34 <TIM_Base_SetConfig+0x38>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1a:	d00b      	beq.n	8002c34 <TIM_Base_SetConfig+0x38>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a39      	ldr	r2, [pc, #228]	; (8002d04 <TIM_Base_SetConfig+0x108>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <TIM_Base_SetConfig+0x38>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <TIM_Base_SetConfig+0x10c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_Base_SetConfig+0x38>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a37      	ldr	r2, [pc, #220]	; (8002d0c <TIM_Base_SetConfig+0x110>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d108      	bne.n	8002c46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a2d      	ldr	r2, [pc, #180]	; (8002d00 <TIM_Base_SetConfig+0x104>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01b      	beq.n	8002c86 <TIM_Base_SetConfig+0x8a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d017      	beq.n	8002c86 <TIM_Base_SetConfig+0x8a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <TIM_Base_SetConfig+0x108>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <TIM_Base_SetConfig+0x8a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <TIM_Base_SetConfig+0x10c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00f      	beq.n	8002c86 <TIM_Base_SetConfig+0x8a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <TIM_Base_SetConfig+0x110>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <TIM_Base_SetConfig+0x8a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <TIM_Base_SetConfig+0x8a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a26      	ldr	r2, [pc, #152]	; (8002d14 <TIM_Base_SetConfig+0x118>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_Base_SetConfig+0x8a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a25      	ldr	r2, [pc, #148]	; (8002d18 <TIM_Base_SetConfig+0x11c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d108      	bne.n	8002c98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <TIM_Base_SetConfig+0x104>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00f      	beq.n	8002ce4 <TIM_Base_SetConfig+0xe8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <TIM_Base_SetConfig+0x110>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00b      	beq.n	8002ce4 <TIM_Base_SetConfig+0xe8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <TIM_Base_SetConfig+0x114>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d007      	beq.n	8002ce4 <TIM_Base_SetConfig+0xe8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <TIM_Base_SetConfig+0x118>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d003      	beq.n	8002ce4 <TIM_Base_SetConfig+0xe8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <TIM_Base_SetConfig+0x11c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d103      	bne.n	8002cec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	615a      	str	r2, [r3, #20]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40013400 	.word	0x40013400
 8002d10:	40014000 	.word	0x40014000
 8002d14:	40014400 	.word	0x40014400
 8002d18:	40014800 	.word	0x40014800

08002d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d5e:	f3ef 8305 	mrs	r3, IPSR
 8002d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6e:	607b      	str	r3, [r7, #4]
  return(result);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <osKernelInitialize+0x32>
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <osKernelInitialize+0x64>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d109      	bne.n	8002d92 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d82:	603b      	str	r3, [r7, #0]
  return(result);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d8a:	f06f 0305 	mvn.w	r3, #5
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e00c      	b.n	8002dac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <osKernelInitialize+0x64>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <osKernelInitialize+0x64>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e002      	b.n	8002dac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002daa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002dac:	68fb      	ldr	r3, [r7, #12]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000090 	.word	0x20000090

08002dc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dc6:	f3ef 8305 	mrs	r3, IPSR
 8002dca:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd6:	607b      	str	r3, [r7, #4]
  return(result);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <osKernelStart+0x32>
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <osKernelStart+0x64>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d109      	bne.n	8002dfa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002de6:	f3ef 8311 	mrs	r3, BASEPRI
 8002dea:	603b      	str	r3, [r7, #0]
  return(result);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <osKernelStart+0x3a>
    stat = osErrorISR;
 8002df2:	f06f 0305 	mvn.w	r3, #5
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e00e      	b.n	8002e18 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <osKernelStart+0x64>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <osKernelStart+0x64>)
 8002e04:	2202      	movs	r2, #2
 8002e06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002e08:	f001 f898 	bl	8003f3c <vTaskStartScheduler>
      stat = osOK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e002      	b.n	8002e18 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e18:	68fb      	ldr	r3, [r7, #12]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000090 	.word	0x20000090

08002e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b092      	sub	sp, #72	; 0x48
 8002e2c:	af04      	add	r7, sp, #16
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e38:	f3ef 8305 	mrs	r3, IPSR
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f040 8094 	bne.w	8002f6e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e46:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4a:	623b      	str	r3, [r7, #32]
  return(result);
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 808d 	bne.w	8002f6e <osThreadNew+0x146>
 8002e54:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <osThreadNew+0x150>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d106      	bne.n	8002e6a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8002e60:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 8082 	bne.w	8002f6e <osThreadNew+0x146>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d07e      	beq.n	8002f6e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002e74:	2318      	movs	r3, #24
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002e78:	2300      	movs	r3, #0
 8002e7a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002e7c:	f107 031b 	add.w	r3, r7, #27
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d045      	beq.n	8002f1a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <osThreadNew+0x74>
        name = attr->name;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <osThreadNew+0x9a>
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	2b38      	cmp	r3, #56	; 0x38
 8002eb4:	d805      	bhi.n	8002ec2 <osThreadNew+0x9a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <osThreadNew+0x9e>
        return (NULL);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e054      	b.n	8002f70 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00e      	beq.n	8002efc <osThreadNew+0xd4>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2bbb      	cmp	r3, #187	; 0xbb
 8002ee4:	d90a      	bls.n	8002efc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <osThreadNew+0xd4>
        mem = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002efa:	e010      	b.n	8002f1e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10c      	bne.n	8002f1e <osThreadNew+0xf6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d108      	bne.n	8002f1e <osThreadNew+0xf6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <osThreadNew+0xf6>
          mem = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f18:	e001      	b.n	8002f1e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d110      	bne.n	8002f46 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f2c:	9202      	str	r2, [sp, #8]
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fe1a 	bl	8003b74 <xTaskCreateStatic>
 8002f40:	4603      	mov	r3, r0
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	e013      	b.n	8002f6e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d110      	bne.n	8002f6e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fe64 	bl	8003c2c <xTaskCreate>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <osThreadNew+0x146>
          hTask = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f6e:	697b      	ldr	r3, [r7, #20]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3738      	adds	r7, #56	; 0x38
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000090 	.word	0x20000090

08002f7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f84:	f3ef 8305 	mrs	r3, IPSR
 8002f88:	613b      	str	r3, [r7, #16]
  return(result);
 8002f8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10f      	bne.n	8002fb0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f90:	f3ef 8310 	mrs	r3, PRIMASK
 8002f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <osDelay+0x34>
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <osDelay+0x58>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d109      	bne.n	8002fb8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8002fa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <osDelay+0x3c>
    stat = osErrorISR;
 8002fb0:	f06f 0305 	mvn.w	r3, #5
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e007      	b.n	8002fc8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 ff86 	bl	8003ed4 <vTaskDelay>
    }
  }

  return (stat);
 8002fc8:	697b      	ldr	r3, [r7, #20]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000090 	.word	0x20000090

08002fd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fe8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4a06      	ldr	r2, [pc, #24]	; (8003008 <vApplicationGetIdleTaskMemory+0x30>)
 8002fee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	601a      	str	r2, [r3, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	20000094 	.word	0x20000094
 8003008:	20000150 	.word	0x20000150

0800300c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a07      	ldr	r2, [pc, #28]	; (8003038 <vApplicationGetTimerTaskMemory+0x2c>)
 800301c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4a06      	ldr	r2, [pc, #24]	; (800303c <vApplicationGetTimerTaskMemory+0x30>)
 8003022:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f44f 7280 	mov.w	r2, #256	; 0x100
 800302a:	601a      	str	r2, [r3, #0]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	20000350 	.word	0x20000350
 800303c:	2000040c 	.word	0x2000040c

08003040 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f103 0208 	add.w	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003058:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f103 0208 	add.w	r2, r3, #8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f103 0208 	add.w	r2, r3, #8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	601a      	str	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f8:	d103      	bne.n	8003102 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e00c      	b.n	800311c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3308      	adds	r3, #8
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e002      	b.n	8003110 <vListInsert+0x2e>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	429a      	cmp	r2, r3
 800311a:	d2f6      	bcs.n	800310a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	601a      	str	r2, [r3, #0]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6892      	ldr	r2, [r2, #8]
 800316a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6852      	ldr	r2, [r2, #4]
 8003174:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	d103      	bne.n	8003188 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	1e5a      	subs	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80031ce:	bf00      	nop
 80031d0:	e7fe      	b.n	80031d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80031d2:	f002 f837 	bl	8005244 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	68f9      	ldr	r1, [r7, #12]
 80031e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	441a      	add	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	3b01      	subs	r3, #1
 8003204:	68f9      	ldr	r1, [r7, #12]
 8003206:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	441a      	add	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	22ff      	movs	r2, #255	; 0xff
 8003216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d114      	bne.n	8003252 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01a      	beq.n	8003266 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	3310      	adds	r3, #16
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f91f 	bl	8004478 <xTaskRemoveFromEventList>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d012      	beq.n	8003266 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <xQueueGenericReset+0xcc>)
 8003242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	e009      	b.n	8003266 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3310      	adds	r3, #16
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fef2 	bl	8003040 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3324      	adds	r3, #36	; 0x24
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff feed 	bl	8003040 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003266:	f002 f81d 	bl	80052a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800326a:	2301      	movs	r3, #1
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08e      	sub	sp, #56	; 0x38
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800329e:	bf00      	nop
 80032a0:	e7fe      	b.n	80032a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <xQueueGenericCreateStatic+0x52>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <xQueueGenericCreateStatic+0x56>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <xQueueGenericCreateStatic+0x58>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	623b      	str	r3, [r7, #32]
}
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <xQueueGenericCreateStatic+0x7e>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <xQueueGenericCreateStatic+0x82>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <xQueueGenericCreateStatic+0x84>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	61fb      	str	r3, [r7, #28]
}
 8003312:	bf00      	nop
 8003314:	e7fe      	b.n	8003314 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003316:	2350      	movs	r3, #80	; 0x50
 8003318:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b50      	cmp	r3, #80	; 0x50
 800331e:	d00a      	beq.n	8003336 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	61bb      	str	r3, [r7, #24]
}
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003348:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f805 	bl	8003366 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800335e:	4618      	mov	r0, r3
 8003360:	3730      	adds	r7, #48	; 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e002      	b.n	8003388 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003394:	2101      	movs	r1, #1
 8003396:	69b8      	ldr	r0, [r7, #24]
 8003398:	f7ff ff06 	bl	80031a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08e      	sub	sp, #56	; 0x38
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033ba:	2300      	movs	r3, #0
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <xQueueGenericSend+0x32>
	__asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <xQueueGenericSend+0x40>
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <xQueueGenericSend+0x44>
 80033ec:	2301      	movs	r3, #1
 80033ee:	e000      	b.n	80033f2 <xQueueGenericSend+0x46>
 80033f0:	2300      	movs	r3, #0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <xQueueGenericSend+0x60>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d103      	bne.n	800341a <xQueueGenericSend+0x6e>
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <xQueueGenericSend+0x72>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <xQueueGenericSend+0x74>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xQueueGenericSend+0x8e>
	__asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	623b      	str	r3, [r7, #32]
}
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800343a:	f001 f9e5 	bl	8004808 <xTaskGetSchedulerState>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <xQueueGenericSend+0x9e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <xQueueGenericSend+0xa2>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <xQueueGenericSend+0xa4>
 800344e:	2300      	movs	r3, #0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <xQueueGenericSend+0xbe>
	__asm volatile
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	f383 8811 	msr	BASEPRI, r3
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	61fb      	str	r3, [r7, #28]
}
 8003466:	bf00      	nop
 8003468:	e7fe      	b.n	8003468 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800346a:	f001 feeb 	bl	8005244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	429a      	cmp	r2, r3
 8003478:	d302      	bcc.n	8003480 <xQueueGenericSend+0xd4>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d129      	bne.n	80034d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003486:	f000 fa07 	bl	8003898 <prvCopyDataToQueue>
 800348a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	d010      	beq.n	80034b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	3324      	adds	r3, #36	; 0x24
 8003498:	4618      	mov	r0, r3
 800349a:	f000 ffed 	bl	8004478 <xTaskRemoveFromEventList>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d013      	beq.n	80034cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034a4:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <xQueueGenericSend+0x1f8>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	e00a      	b.n	80034cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034bc:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <xQueueGenericSend+0x1f8>)
 80034be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034cc:	f001 feea 	bl	80052a4 <vPortExitCritical>
				return pdPASS;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e063      	b.n	800359c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d103      	bne.n	80034e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034da:	f001 fee3 	bl	80052a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	e05c      	b.n	800359c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 f827 	bl	8004540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034f2:	2301      	movs	r3, #1
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034f6:	f001 fed5 	bl	80052a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034fa:	f000 fd8f 	bl	800401c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034fe:	f001 fea1 	bl	8005244 <vPortEnterCritical>
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003508:	b25b      	sxtb	r3, r3
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350e:	d103      	bne.n	8003518 <xQueueGenericSend+0x16c>
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800351e:	b25b      	sxtb	r3, r3
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003524:	d103      	bne.n	800352e <xQueueGenericSend+0x182>
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800352e:	f001 feb9 	bl	80052a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003532:	1d3a      	adds	r2, r7, #4
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f001 f816 	bl	800456c <xTaskCheckForTimeOut>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d124      	bne.n	8003590 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003548:	f000 fa9e 	bl	8003a88 <prvIsQueueFull>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d018      	beq.n	8003584 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	3310      	adds	r3, #16
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f000 ff3c 	bl	80043d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003562:	f000 fa29 	bl	80039b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003566:	f000 fd67 	bl	8004038 <xTaskResumeAll>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	f47f af7c 	bne.w	800346a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003572:	4b0c      	ldr	r3, [pc, #48]	; (80035a4 <xQueueGenericSend+0x1f8>)
 8003574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	e772      	b.n	800346a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003586:	f000 fa17 	bl	80039b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800358a:	f000 fd55 	bl	8004038 <xTaskResumeAll>
 800358e:	e76c      	b.n	800346a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003592:	f000 fa11 	bl	80039b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003596:	f000 fd4f 	bl	8004038 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800359a:	2300      	movs	r3, #0
		}
	}
}
 800359c:	4618      	mov	r0, r3
 800359e:	3738      	adds	r7, #56	; 0x38
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	e000ed04 	.word	0xe000ed04

080035a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08e      	sub	sp, #56	; 0x38
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <xQueueGenericSendFromISR+0x3c>
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <xQueueGenericSendFromISR+0x40>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <xQueueGenericSendFromISR+0x42>
 80035e8:	2300      	movs	r3, #0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	623b      	str	r3, [r7, #32]
}
 8003600:	bf00      	nop
 8003602:	e7fe      	b.n	8003602 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d103      	bne.n	8003612 <xQueueGenericSendFromISR+0x6a>
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <xQueueGenericSendFromISR+0x6e>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <xQueueGenericSendFromISR+0x70>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	61fb      	str	r3, [r7, #28]
}
 800362e:	bf00      	nop
 8003630:	e7fe      	b.n	8003630 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003632:	f001 fee9 	bl	8005408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003636:	f3ef 8211 	mrs	r2, BASEPRI
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	61ba      	str	r2, [r7, #24]
 800364c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800364e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <xQueueGenericSendFromISR+0xbc>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d12c      	bne.n	80036be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800366a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003674:	f000 f910 	bl	8003898 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003678:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003680:	d112      	bne.n	80036a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	d016      	beq.n	80036b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800368a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368c:	3324      	adds	r3, #36	; 0x24
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fef2 	bl	8004478 <xTaskRemoveFromEventList>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00e      	beq.n	80036b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e007      	b.n	80036b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ac:	3301      	adds	r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	b25a      	sxtb	r2, r3
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036b8:	2301      	movs	r3, #1
 80036ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036bc:	e001      	b.n	80036c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3738      	adds	r7, #56	; 0x38
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <xQueueReceive+0x30>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	623b      	str	r3, [r7, #32]
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <xQueueReceive+0x3e>
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <xQueueReceive+0x42>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueReceive+0x44>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <xQueueReceive+0x5e>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	61fb      	str	r3, [r7, #28]
}
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003736:	f001 f867 	bl	8004808 <xTaskGetSchedulerState>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <xQueueReceive+0x6e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <xQueueReceive+0x72>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <xQueueReceive+0x74>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <xQueueReceive+0x8e>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	61bb      	str	r3, [r7, #24]
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003766:	f001 fd6d 	bl	8005244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01f      	beq.n	80037b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800377a:	f000 f8f7 	bl	800396c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00f      	beq.n	80037ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003790:	3310      	adds	r3, #16
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fe70 	bl	8004478 <xTaskRemoveFromEventList>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <xQueueReceive+0x1bc>)
 80037a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037ae:	f001 fd79 	bl	80052a4 <vPortExitCritical>
				return pdPASS;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e069      	b.n	800388a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d103      	bne.n	80037c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037bc:	f001 fd72 	bl	80052a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e062      	b.n	800388a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037ca:	f107 0310 	add.w	r3, r7, #16
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 feb6 	bl	8004540 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037d8:	f001 fd64 	bl	80052a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037dc:	f000 fc1e 	bl	800401c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037e0:	f001 fd30 	bl	8005244 <vPortEnterCritical>
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ea:	b25b      	sxtb	r3, r3
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f0:	d103      	bne.n	80037fa <xQueueReceive+0x122>
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003800:	b25b      	sxtb	r3, r3
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003806:	d103      	bne.n	8003810 <xQueueReceive+0x138>
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003810:	f001 fd48 	bl	80052a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003814:	1d3a      	adds	r2, r7, #4
 8003816:	f107 0310 	add.w	r3, r7, #16
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fea5 	bl	800456c <xTaskCheckForTimeOut>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d123      	bne.n	8003870 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800382a:	f000 f917 	bl	8003a5c <prvIsQueueEmpty>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d017      	beq.n	8003864 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fdcb 	bl	80043d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003844:	f000 f8b8 	bl	80039b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003848:	f000 fbf6 	bl	8004038 <xTaskResumeAll>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d189      	bne.n	8003766 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <xQueueReceive+0x1bc>)
 8003854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	e780      	b.n	8003766 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003866:	f000 f8a7 	bl	80039b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800386a:	f000 fbe5 	bl	8004038 <xTaskResumeAll>
 800386e:	e77a      	b.n	8003766 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003872:	f000 f8a1 	bl	80039b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003876:	f000 fbdf 	bl	8004038 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800387a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387c:	f000 f8ee 	bl	8003a5c <prvIsQueueEmpty>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	f43f af6f 	beq.w	8003766 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003888:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800388a:	4618      	mov	r0, r3
 800388c:	3730      	adds	r7, #48	; 0x30
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d14d      	bne.n	800395a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 ffbe 	bl	8004844 <xTaskPriorityDisinherit>
 80038c8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	e043      	b.n	800395a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d119      	bne.n	800390c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6898      	ldr	r0, [r3, #8]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	461a      	mov	r2, r3
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	f001 ffd0 	bl	8005888 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	441a      	add	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d32b      	bcc.n	800395a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	609a      	str	r2, [r3, #8]
 800390a:	e026      	b.n	800395a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68d8      	ldr	r0, [r3, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	461a      	mov	r2, r3
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	f001 ffb6 	bl	8005888 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	425b      	negs	r3, r3
 8003926:	441a      	add	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d207      	bcs.n	8003948 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	425b      	negs	r3, r3
 8003942:	441a      	add	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d105      	bne.n	800395a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	3b01      	subs	r3, #1
 8003958:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003962:	697b      	ldr	r3, [r7, #20]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d018      	beq.n	80039b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	441a      	add	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	d303      	bcc.n	80039a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68d9      	ldr	r1, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	461a      	mov	r2, r3
 80039aa:	6838      	ldr	r0, [r7, #0]
 80039ac:	f001 ff6c 	bl	8005888 <memcpy>
	}
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039c0:	f001 fc40 	bl	8005244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039cc:	e011      	b.n	80039f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d012      	beq.n	80039fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	3324      	adds	r3, #36	; 0x24
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fd4c 	bl	8004478 <xTaskRemoveFromEventList>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039e6:	f000 fe23 	bl	8004630 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	dce9      	bgt.n	80039ce <prvUnlockQueue+0x16>
 80039fa:	e000      	b.n	80039fe <prvUnlockQueue+0x46>
					break;
 80039fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	22ff      	movs	r2, #255	; 0xff
 8003a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a06:	f001 fc4d 	bl	80052a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a0a:	f001 fc1b 	bl	8005244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a16:	e011      	b.n	8003a3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3310      	adds	r3, #16
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fd27 	bl	8004478 <xTaskRemoveFromEventList>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a30:	f000 fdfe 	bl	8004630 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a34:	7bbb      	ldrb	r3, [r7, #14]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	dce9      	bgt.n	8003a18 <prvUnlockQueue+0x60>
 8003a44:	e000      	b.n	8003a48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	22ff      	movs	r2, #255	; 0xff
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a50:	f001 fc28 	bl	80052a4 <vPortExitCritical>
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a64:	f001 fbee 	bl	8005244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a70:	2301      	movs	r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e001      	b.n	8003a7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a7a:	f001 fc13 	bl	80052a4 <vPortExitCritical>

	return xReturn;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a90:	f001 fbd8 	bl	8005244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d102      	bne.n	8003aa6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e001      	b.n	8003aaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aaa:	f001 fbfb 	bl	80052a4 <vPortExitCritical>

	return xReturn;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	e014      	b.n	8003af2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ac8:	4a0f      	ldr	r2, [pc, #60]	; (8003b08 <vQueueAddToRegistry+0x50>)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ad4:	490c      	ldr	r1, [pc, #48]	; (8003b08 <vQueueAddToRegistry+0x50>)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <vQueueAddToRegistry+0x50>)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003aea:	e006      	b.n	8003afa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3301      	adds	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b07      	cmp	r3, #7
 8003af6:	d9e7      	bls.n	8003ac8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20001b58 	.word	0x20001b58

08003b0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b1c:	f001 fb92 	bl	8005244 <vPortEnterCritical>
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b26:	b25b      	sxtb	r3, r3
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b2c:	d103      	bne.n	8003b36 <vQueueWaitForMessageRestricted+0x2a>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b3c:	b25b      	sxtb	r3, r3
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b42:	d103      	bne.n	8003b4c <vQueueWaitForMessageRestricted+0x40>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b4c:	f001 fbaa 	bl	80052a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3324      	adds	r3, #36	; 0x24
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fc5d 	bl	8004420 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f7ff ff26 	bl	80039b8 <prvUnlockQueue>
	}
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	; 0x38
 8003b78:	af04      	add	r7, sp, #16
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	623b      	str	r3, [r7, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <xTaskCreateStatic+0x46>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	61fb      	str	r3, [r7, #28]
}
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003bba:	23bc      	movs	r3, #188	; 0xbc
 8003bbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2bbc      	cmp	r3, #188	; 0xbc
 8003bc2:	d00a      	beq.n	8003bda <xTaskCreateStatic+0x66>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	61bb      	str	r3, [r7, #24]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01e      	beq.n	8003c1e <xTaskCreateStatic+0xaa>
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01b      	beq.n	8003c1e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9303      	str	r3, [sp, #12]
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	9302      	str	r3, [sp, #8]
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f851 	bl	8003cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c18:	f000 f8ec 	bl	8003df4 <prvAddNewTaskToReadyList>
 8003c1c:	e001      	b.n	8003c22 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c22:	697b      	ldr	r3, [r7, #20]
	}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3728      	adds	r7, #40	; 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08c      	sub	sp, #48	; 0x30
 8003c30:	af04      	add	r7, sp, #16
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 fc21 	bl	8005488 <pvPortMalloc>
 8003c46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00e      	beq.n	8003c6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c4e:	20bc      	movs	r0, #188	; 0xbc
 8003c50:	f001 fc1a 	bl	8005488 <pvPortMalloc>
 8003c54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
 8003c62:	e005      	b.n	8003c70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c64:	6978      	ldr	r0, [r7, #20]
 8003c66:	f001 fcd3 	bl	8005610 <vPortFree>
 8003c6a:	e001      	b.n	8003c70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d017      	beq.n	8003ca6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c7e:	88fa      	ldrh	r2, [r7, #6]
 8003c80:	2300      	movs	r3, #0
 8003c82:	9303      	str	r3, [sp, #12]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	9302      	str	r3, [sp, #8]
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f80f 	bl	8003cb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c9a:	69f8      	ldr	r0, [r7, #28]
 8003c9c:	f000 f8aa 	bl	8003df4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	e002      	b.n	8003cac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003caa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cac:	69bb      	ldr	r3, [r7, #24]
	}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	461a      	mov	r2, r3
 8003cd0:	21a5      	movs	r1, #165	; 0xa5
 8003cd2:	f001 fde7 	bl	80058a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f023 0307 	bic.w	r3, r3, #7
 8003cee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	617b      	str	r3, [r7, #20]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e012      	b.n	8003d3c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	7819      	ldrb	r1, [r3, #0]
 8003d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	4413      	add	r3, r2
 8003d24:	3334      	adds	r3, #52	; 0x34
 8003d26:	460a      	mov	r2, r1
 8003d28:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d006      	beq.n	8003d44 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b0f      	cmp	r3, #15
 8003d40:	d9e9      	bls.n	8003d16 <prvInitialiseNewTask+0x5e>
 8003d42:	e000      	b.n	8003d46 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003d44:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	2b37      	cmp	r3, #55	; 0x37
 8003d52:	d901      	bls.n	8003d58 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d54:	2337      	movs	r3, #55	; 0x37
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	2200      	movs	r2, #0
 8003d68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff f986 	bl	8003080 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	3318      	adds	r3, #24
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff f981 	bl	8003080 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	3354      	adds	r3, #84	; 0x54
 8003da8:	2260      	movs	r2, #96	; 0x60
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 fd79 	bl	80058a4 <memset>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	4a0c      	ldr	r2, [pc, #48]	; (8003de8 <prvInitialiseNewTask+0x130>)
 8003db6:	659a      	str	r2, [r3, #88]	; 0x58
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	4a0c      	ldr	r2, [pc, #48]	; (8003dec <prvInitialiseNewTask+0x134>)
 8003dbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <prvInitialiseNewTask+0x138>)
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	69b8      	ldr	r0, [r7, #24]
 8003dca:	f001 f90f 	bl	8004fec <pxPortInitialiseStack>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003de0:	bf00      	nop
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	08005af8 	.word	0x08005af8
 8003dec:	08005b18 	.word	0x08005b18
 8003df0:	08005ad8 	.word	0x08005ad8

08003df4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003dfc:	f001 fa22 	bl	8005244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e00:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <prvAddNewTaskToReadyList+0xc4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <prvAddNewTaskToReadyList+0xc4>)
 8003e08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e0a:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <prvAddNewTaskToReadyList+0xc8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e12:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <prvAddNewTaskToReadyList+0xc8>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e18:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <prvAddNewTaskToReadyList+0xc4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d110      	bne.n	8003e42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e20:	f000 fc2a 	bl	8004678 <prvInitialiseTaskLists>
 8003e24:	e00d      	b.n	8003e42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e26:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <prvAddNewTaskToReadyList+0xcc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e2e:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <prvAddNewTaskToReadyList+0xc8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d802      	bhi.n	8003e42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e3c:	4a1f      	ldr	r2, [pc, #124]	; (8003ebc <prvAddNewTaskToReadyList+0xc8>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <prvAddNewTaskToReadyList+0xd0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3301      	adds	r3, #1
 8003e48:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <prvAddNewTaskToReadyList+0xd0>)
 8003e4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <prvAddNewTaskToReadyList+0xd0>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <prvAddNewTaskToReadyList+0xd4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d903      	bls.n	8003e68 <prvAddNewTaskToReadyList+0x74>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <prvAddNewTaskToReadyList+0xd4>)
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <prvAddNewTaskToReadyList+0xd8>)
 8003e76:	441a      	add	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4610      	mov	r0, r2
 8003e80:	f7ff f90b 	bl	800309a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e84:	f001 fa0e 	bl	80052a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <prvAddNewTaskToReadyList+0xcc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00e      	beq.n	8003eae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <prvAddNewTaskToReadyList+0xc8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d207      	bcs.n	8003eae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <prvAddNewTaskToReadyList+0xdc>)
 8003ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000ce0 	.word	0x20000ce0
 8003ebc:	2000080c 	.word	0x2000080c
 8003ec0:	20000cec 	.word	0x20000cec
 8003ec4:	20000cfc 	.word	0x20000cfc
 8003ec8:	20000ce8 	.word	0x20000ce8
 8003ecc:	20000810 	.word	0x20000810
 8003ed0:	e000ed04 	.word	0xe000ed04

08003ed4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d017      	beq.n	8003f16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <vTaskDelay+0x60>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <vTaskDelay+0x30>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	60bb      	str	r3, [r7, #8]
}
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f04:	f000 f88a 	bl	800401c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f08:	2100      	movs	r1, #0
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fd08 	bl	8004920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f10:	f000 f892 	bl	8004038 <xTaskResumeAll>
 8003f14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d107      	bne.n	8003f2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <vTaskDelay+0x64>)
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000d08 	.word	0x20000d08
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f4a:	463a      	mov	r2, r7
 8003f4c:	1d39      	adds	r1, r7, #4
 8003f4e:	f107 0308 	add.w	r3, r7, #8
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff f840 	bl	8002fd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f58:	6839      	ldr	r1, [r7, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	9202      	str	r2, [sp, #8]
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2300      	movs	r3, #0
 8003f68:	460a      	mov	r2, r1
 8003f6a:	4924      	ldr	r1, [pc, #144]	; (8003ffc <vTaskStartScheduler+0xc0>)
 8003f6c:	4824      	ldr	r0, [pc, #144]	; (8004000 <vTaskStartScheduler+0xc4>)
 8003f6e:	f7ff fe01 	bl	8003b74 <xTaskCreateStatic>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4a23      	ldr	r2, [pc, #140]	; (8004004 <vTaskStartScheduler+0xc8>)
 8003f76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f78:	4b22      	ldr	r3, [pc, #136]	; (8004004 <vTaskStartScheduler+0xc8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f80:	2301      	movs	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e001      	b.n	8003f8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d102      	bne.n	8003f96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f90:	f000 fd1a 	bl	80049c8 <xTimerCreateTimerTask>
 8003f94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d11b      	bne.n	8003fd4 <vTaskStartScheduler+0x98>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	613b      	str	r3, [r7, #16]
}
 8003fae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fb0:	4b15      	ldr	r3, [pc, #84]	; (8004008 <vTaskStartScheduler+0xcc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3354      	adds	r3, #84	; 0x54
 8003fb6:	4a15      	ldr	r2, [pc, #84]	; (800400c <vTaskStartScheduler+0xd0>)
 8003fb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <vTaskStartScheduler+0xd4>)
 8003fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fc2:	4b14      	ldr	r3, [pc, #80]	; (8004014 <vTaskStartScheduler+0xd8>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003fc8:	4b13      	ldr	r3, [pc, #76]	; (8004018 <vTaskStartScheduler+0xdc>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fce:	f001 f897 	bl	8005100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fd2:	e00e      	b.n	8003ff2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fda:	d10a      	bne.n	8003ff2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	60fb      	str	r3, [r7, #12]
}
 8003fee:	bf00      	nop
 8003ff0:	e7fe      	b.n	8003ff0 <vTaskStartScheduler+0xb4>
}
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	08005a64 	.word	0x08005a64
 8004000:	08004649 	.word	0x08004649
 8004004:	20000d04 	.word	0x20000d04
 8004008:	2000080c 	.word	0x2000080c
 800400c:	20000010 	.word	0x20000010
 8004010:	20000d00 	.word	0x20000d00
 8004014:	20000cec 	.word	0x20000cec
 8004018:	20000ce4 	.word	0x20000ce4

0800401c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <vTaskSuspendAll+0x18>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	4a03      	ldr	r2, [pc, #12]	; (8004034 <vTaskSuspendAll+0x18>)
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	20000d08 	.word	0x20000d08

08004038 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004046:	4b42      	ldr	r3, [pc, #264]	; (8004150 <xTaskResumeAll+0x118>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <xTaskResumeAll+0x2c>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	603b      	str	r3, [r7, #0]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004064:	f001 f8ee 	bl	8005244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004068:	4b39      	ldr	r3, [pc, #228]	; (8004150 <xTaskResumeAll+0x118>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3b01      	subs	r3, #1
 800406e:	4a38      	ldr	r2, [pc, #224]	; (8004150 <xTaskResumeAll+0x118>)
 8004070:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <xTaskResumeAll+0x118>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d162      	bne.n	8004140 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800407a:	4b36      	ldr	r3, [pc, #216]	; (8004154 <xTaskResumeAll+0x11c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d05e      	beq.n	8004140 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004082:	e02f      	b.n	80040e4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004084:	4b34      	ldr	r3, [pc, #208]	; (8004158 <xTaskResumeAll+0x120>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	3318      	adds	r3, #24
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff f85f 	bl	8003154 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3304      	adds	r3, #4
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff f85a 	bl	8003154 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4b2d      	ldr	r3, [pc, #180]	; (800415c <xTaskResumeAll+0x124>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d903      	bls.n	80040b4 <xTaskResumeAll+0x7c>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a2a      	ldr	r2, [pc, #168]	; (800415c <xTaskResumeAll+0x124>)
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4a27      	ldr	r2, [pc, #156]	; (8004160 <xTaskResumeAll+0x128>)
 80040c2:	441a      	add	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f7fe ffe5 	bl	800309a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	4b23      	ldr	r3, [pc, #140]	; (8004164 <xTaskResumeAll+0x12c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80040de:	4b22      	ldr	r3, [pc, #136]	; (8004168 <xTaskResumeAll+0x130>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <xTaskResumeAll+0x120>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1cb      	bne.n	8004084 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040f2:	f000 fb63 	bl	80047bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80040f6:	4b1d      	ldr	r3, [pc, #116]	; (800416c <xTaskResumeAll+0x134>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d010      	beq.n	8004124 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004102:	f000 f847 	bl	8004194 <xTaskIncrementTick>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800410c:	4b16      	ldr	r3, [pc, #88]	; (8004168 <xTaskResumeAll+0x130>)
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3b01      	subs	r3, #1
 8004116:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f1      	bne.n	8004102 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800411e:	4b13      	ldr	r3, [pc, #76]	; (800416c <xTaskResumeAll+0x134>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <xTaskResumeAll+0x130>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800412c:	2301      	movs	r3, #1
 800412e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <xTaskResumeAll+0x138>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004140:	f001 f8b0 	bl	80052a4 <vPortExitCritical>

	return xAlreadyYielded;
 8004144:	68bb      	ldr	r3, [r7, #8]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000d08 	.word	0x20000d08
 8004154:	20000ce0 	.word	0x20000ce0
 8004158:	20000ca0 	.word	0x20000ca0
 800415c:	20000ce8 	.word	0x20000ce8
 8004160:	20000810 	.word	0x20000810
 8004164:	2000080c 	.word	0x2000080c
 8004168:	20000cf4 	.word	0x20000cf4
 800416c:	20000cf0 	.word	0x20000cf0
 8004170:	e000ed04 	.word	0xe000ed04

08004174 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <xTaskGetTickCount+0x1c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004180:	687b      	ldr	r3, [r7, #4]
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000ce4 	.word	0x20000ce4

08004194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800419e:	4b51      	ldr	r3, [pc, #324]	; (80042e4 <xTaskIncrementTick+0x150>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f040 808e 	bne.w	80042c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041a8:	4b4f      	ldr	r3, [pc, #316]	; (80042e8 <xTaskIncrementTick+0x154>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3301      	adds	r3, #1
 80041ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041b0:	4a4d      	ldr	r2, [pc, #308]	; (80042e8 <xTaskIncrementTick+0x154>)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d120      	bne.n	80041fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041bc:	4b4b      	ldr	r3, [pc, #300]	; (80042ec <xTaskIncrementTick+0x158>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <xTaskIncrementTick+0x48>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	603b      	str	r3, [r7, #0]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <xTaskIncrementTick+0x46>
 80041dc:	4b43      	ldr	r3, [pc, #268]	; (80042ec <xTaskIncrementTick+0x158>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <xTaskIncrementTick+0x15c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a41      	ldr	r2, [pc, #260]	; (80042ec <xTaskIncrementTick+0x158>)
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	4a41      	ldr	r2, [pc, #260]	; (80042f0 <xTaskIncrementTick+0x15c>)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b40      	ldr	r3, [pc, #256]	; (80042f4 <xTaskIncrementTick+0x160>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	4a3f      	ldr	r2, [pc, #252]	; (80042f4 <xTaskIncrementTick+0x160>)
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	f000 fadf 	bl	80047bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041fe:	4b3e      	ldr	r3, [pc, #248]	; (80042f8 <xTaskIncrementTick+0x164>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	429a      	cmp	r2, r3
 8004206:	d34e      	bcc.n	80042a6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004208:	4b38      	ldr	r3, [pc, #224]	; (80042ec <xTaskIncrementTick+0x158>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <xTaskIncrementTick+0x82>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <xTaskIncrementTick+0x84>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <xTaskIncrementTick+0x164>)
 800421e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004222:	601a      	str	r2, [r3, #0]
					break;
 8004224:	e03f      	b.n	80042a6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004226:	4b31      	ldr	r3, [pc, #196]	; (80042ec <xTaskIncrementTick+0x158>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d203      	bcs.n	8004246 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800423e:	4a2e      	ldr	r2, [pc, #184]	; (80042f8 <xTaskIncrementTick+0x164>)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6013      	str	r3, [r2, #0]
						break;
 8004244:	e02f      	b.n	80042a6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe ff82 	bl	8003154 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	d004      	beq.n	8004262 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	3318      	adds	r3, #24
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe ff79 	bl	8003154 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004266:	4b25      	ldr	r3, [pc, #148]	; (80042fc <xTaskIncrementTick+0x168>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d903      	bls.n	8004276 <xTaskIncrementTick+0xe2>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	4a22      	ldr	r2, [pc, #136]	; (80042fc <xTaskIncrementTick+0x168>)
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <xTaskIncrementTick+0x16c>)
 8004284:	441a      	add	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	3304      	adds	r3, #4
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f7fe ff04 	bl	800309a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <xTaskIncrementTick+0x170>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	429a      	cmp	r2, r3
 800429e:	d3b3      	bcc.n	8004208 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042a0:	2301      	movs	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042a4:	e7b0      	b.n	8004208 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042a6:	4b17      	ldr	r3, [pc, #92]	; (8004304 <xTaskIncrementTick+0x170>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	4914      	ldr	r1, [pc, #80]	; (8004300 <xTaskIncrementTick+0x16c>)
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d907      	bls.n	80042ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e004      	b.n	80042ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <xTaskIncrementTick+0x174>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <xTaskIncrementTick+0x174>)
 80042cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <xTaskIncrementTick+0x178>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80042da:	697b      	ldr	r3, [r7, #20]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000d08 	.word	0x20000d08
 80042e8:	20000ce4 	.word	0x20000ce4
 80042ec:	20000c98 	.word	0x20000c98
 80042f0:	20000c9c 	.word	0x20000c9c
 80042f4:	20000cf8 	.word	0x20000cf8
 80042f8:	20000d00 	.word	0x20000d00
 80042fc:	20000ce8 	.word	0x20000ce8
 8004300:	20000810 	.word	0x20000810
 8004304:	2000080c 	.word	0x2000080c
 8004308:	20000cf0 	.word	0x20000cf0
 800430c:	20000cf4 	.word	0x20000cf4

08004310 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004316:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <vTaskSwitchContext+0xb0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <vTaskSwitchContext+0xb4>)
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004324:	e046      	b.n	80043b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004326:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <vTaskSwitchContext+0xb4>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800432c:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <vTaskSwitchContext+0xb8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e010      	b.n	8004356 <vTaskSwitchContext+0x46>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <vTaskSwitchContext+0x40>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	607b      	str	r3, [r7, #4]
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <vTaskSwitchContext+0x3e>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3b01      	subs	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	491d      	ldr	r1, [pc, #116]	; (80043cc <vTaskSwitchContext+0xbc>)
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	440b      	add	r3, r1
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0e4      	beq.n	8004334 <vTaskSwitchContext+0x24>
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4a15      	ldr	r2, [pc, #84]	; (80043cc <vTaskSwitchContext+0xbc>)
 8004376:	4413      	add	r3, r2
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	605a      	str	r2, [r3, #4]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	3308      	adds	r3, #8
 800438c:	429a      	cmp	r2, r3
 800438e:	d104      	bne.n	800439a <vTaskSwitchContext+0x8a>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a0b      	ldr	r2, [pc, #44]	; (80043d0 <vTaskSwitchContext+0xc0>)
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <vTaskSwitchContext+0xb8>)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <vTaskSwitchContext+0xc0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3354      	adds	r3, #84	; 0x54
 80043b0:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <vTaskSwitchContext+0xc4>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	20000d08 	.word	0x20000d08
 80043c4:	20000cf4 	.word	0x20000cf4
 80043c8:	20000ce8 	.word	0x20000ce8
 80043cc:	20000810 	.word	0x20000810
 80043d0:	2000080c 	.word	0x2000080c
 80043d4:	20000010 	.word	0x20000010

080043d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	60fb      	str	r3, [r7, #12]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043fe:	4b07      	ldr	r3, [pc, #28]	; (800441c <vTaskPlaceOnEventList+0x44>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3318      	adds	r3, #24
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe fe6b 	bl	80030e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800440c:	2101      	movs	r1, #1
 800440e:	6838      	ldr	r0, [r7, #0]
 8004410:	f000 fa86 	bl	8004920 <prvAddCurrentTaskToDelayedList>
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	2000080c 	.word	0x2000080c

08004420 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	617b      	str	r3, [r7, #20]
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004448:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <vTaskPlaceOnEventListRestricted+0x54>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3318      	adds	r3, #24
 800444e:	4619      	mov	r1, r3
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7fe fe22 	bl	800309a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800445c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004460:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	68b8      	ldr	r0, [r7, #8]
 8004466:	f000 fa5b 	bl	8004920 <prvAddCurrentTaskToDelayedList>
	}
 800446a:	bf00      	nop
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	2000080c 	.word	0x2000080c

08004478 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	60fb      	str	r3, [r7, #12]
}
 80044a0:	bf00      	nop
 80044a2:	e7fe      	b.n	80044a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	3318      	adds	r3, #24
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe fe53 	bl	8003154 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <xTaskRemoveFromEventList+0xb0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d11d      	bne.n	80044f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fe4a 	bl	8003154 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <xTaskRemoveFromEventList+0xb4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d903      	bls.n	80044d4 <xTaskRemoveFromEventList+0x5c>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	4a16      	ldr	r2, [pc, #88]	; (800452c <xTaskRemoveFromEventList+0xb4>)
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <xTaskRemoveFromEventList+0xb8>)
 80044e2:	441a      	add	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f7fe fdd5 	bl	800309a <vListInsertEnd>
 80044f0:	e005      	b.n	80044fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3318      	adds	r3, #24
 80044f6:	4619      	mov	r1, r3
 80044f8:	480e      	ldr	r0, [pc, #56]	; (8004534 <xTaskRemoveFromEventList+0xbc>)
 80044fa:	f7fe fdce 	bl	800309a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <xTaskRemoveFromEventList+0xc0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	429a      	cmp	r2, r3
 800450a:	d905      	bls.n	8004518 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800450c:	2301      	movs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <xTaskRemoveFromEventList+0xc4>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e001      	b.n	800451c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800451c:	697b      	ldr	r3, [r7, #20]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000d08 	.word	0x20000d08
 800452c:	20000ce8 	.word	0x20000ce8
 8004530:	20000810 	.word	0x20000810
 8004534:	20000ca0 	.word	0x20000ca0
 8004538:	2000080c 	.word	0x2000080c
 800453c:	20000cf4 	.word	0x20000cf4

08004540 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <vTaskInternalSetTimeOutState+0x24>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <vTaskInternalSetTimeOutState+0x28>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	20000cf8 	.word	0x20000cf8
 8004568:	20000ce4 	.word	0x20000ce4

0800456c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	613b      	str	r3, [r7, #16]
}
 800458e:	bf00      	nop
 8004590:	e7fe      	b.n	8004590 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	60fb      	str	r3, [r7, #12]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045ae:	f000 fe49 	bl	8005244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <xTaskCheckForTimeOut+0xbc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ca:	d102      	bne.n	80045d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	e023      	b.n	800461a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <xTaskCheckForTimeOut+0xc0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d007      	beq.n	80045ee <xTaskCheckForTimeOut+0x82>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d302      	bcc.n	80045ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e015      	b.n	800461a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d20b      	bcs.n	8004610 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff9b 	bl	8004540 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e004      	b.n	800461a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004616:	2301      	movs	r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800461a:	f000 fe43 	bl	80052a4 <vPortExitCritical>

	return xReturn;
 800461e:	69fb      	ldr	r3, [r7, #28]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000ce4 	.word	0x20000ce4
 800462c:	20000cf8 	.word	0x20000cf8

08004630 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <vTaskMissedYield+0x14>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	20000cf4 	.word	0x20000cf4

08004648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004650:	f000 f852 	bl	80046f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <prvIdleTask+0x28>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d9f9      	bls.n	8004650 <prvIdleTask+0x8>
			{
				taskYIELD();
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <prvIdleTask+0x2c>)
 800465e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800466c:	e7f0      	b.n	8004650 <prvIdleTask+0x8>
 800466e:	bf00      	nop
 8004670:	20000810 	.word	0x20000810
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800467e:	2300      	movs	r3, #0
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	e00c      	b.n	800469e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4a12      	ldr	r2, [pc, #72]	; (80046d8 <prvInitialiseTaskLists+0x60>)
 8004690:	4413      	add	r3, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fcd4 	bl	8003040 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3301      	adds	r3, #1
 800469c:	607b      	str	r3, [r7, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b37      	cmp	r3, #55	; 0x37
 80046a2:	d9ef      	bls.n	8004684 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046a4:	480d      	ldr	r0, [pc, #52]	; (80046dc <prvInitialiseTaskLists+0x64>)
 80046a6:	f7fe fccb 	bl	8003040 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046aa:	480d      	ldr	r0, [pc, #52]	; (80046e0 <prvInitialiseTaskLists+0x68>)
 80046ac:	f7fe fcc8 	bl	8003040 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046b0:	480c      	ldr	r0, [pc, #48]	; (80046e4 <prvInitialiseTaskLists+0x6c>)
 80046b2:	f7fe fcc5 	bl	8003040 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046b6:	480c      	ldr	r0, [pc, #48]	; (80046e8 <prvInitialiseTaskLists+0x70>)
 80046b8:	f7fe fcc2 	bl	8003040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046bc:	480b      	ldr	r0, [pc, #44]	; (80046ec <prvInitialiseTaskLists+0x74>)
 80046be:	f7fe fcbf 	bl	8003040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <prvInitialiseTaskLists+0x78>)
 80046c4:	4a05      	ldr	r2, [pc, #20]	; (80046dc <prvInitialiseTaskLists+0x64>)
 80046c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <prvInitialiseTaskLists+0x7c>)
 80046ca:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <prvInitialiseTaskLists+0x68>)
 80046cc:	601a      	str	r2, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000810 	.word	0x20000810
 80046dc:	20000c70 	.word	0x20000c70
 80046e0:	20000c84 	.word	0x20000c84
 80046e4:	20000ca0 	.word	0x20000ca0
 80046e8:	20000cb4 	.word	0x20000cb4
 80046ec:	20000ccc 	.word	0x20000ccc
 80046f0:	20000c98 	.word	0x20000c98
 80046f4:	20000c9c 	.word	0x20000c9c

080046f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046fe:	e019      	b.n	8004734 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004700:	f000 fda0 	bl	8005244 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004704:	4b10      	ldr	r3, [pc, #64]	; (8004748 <prvCheckTasksWaitingTermination+0x50>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe fd1f 	bl	8003154 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004716:	4b0d      	ldr	r3, [pc, #52]	; (800474c <prvCheckTasksWaitingTermination+0x54>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3b01      	subs	r3, #1
 800471c:	4a0b      	ldr	r2, [pc, #44]	; (800474c <prvCheckTasksWaitingTermination+0x54>)
 800471e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <prvCheckTasksWaitingTermination+0x58>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3b01      	subs	r3, #1
 8004726:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <prvCheckTasksWaitingTermination+0x58>)
 8004728:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800472a:	f000 fdbb 	bl	80052a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f810 	bl	8004754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <prvCheckTasksWaitingTermination+0x58>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e1      	bne.n	8004700 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000cb4 	.word	0x20000cb4
 800474c:	20000ce0 	.word	0x20000ce0
 8004750:	20000cc8 	.word	0x20000cc8

08004754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3354      	adds	r3, #84	; 0x54
 8004760:	4618      	mov	r0, r3
 8004762:	f001 f8b5 	bl	80058d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800476c:	2b00      	cmp	r3, #0
 800476e:	d108      	bne.n	8004782 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	4618      	mov	r0, r3
 8004776:	f000 ff4b 	bl	8005610 <vPortFree>
				vPortFree( pxTCB );
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 ff48 	bl	8005610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004780:	e018      	b.n	80047b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004788:	2b01      	cmp	r3, #1
 800478a:	d103      	bne.n	8004794 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 ff3f 	bl	8005610 <vPortFree>
	}
 8004792:	e00f      	b.n	80047b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800479a:	2b02      	cmp	r3, #2
 800479c:	d00a      	beq.n	80047b4 <prvDeleteTCB+0x60>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60fb      	str	r3, [r7, #12]
}
 80047b0:	bf00      	nop
 80047b2:	e7fe      	b.n	80047b2 <prvDeleteTCB+0x5e>
	}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c2:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <prvResetNextTaskUnblockTime+0x44>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <prvResetNextTaskUnblockTime+0x14>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <prvResetNextTaskUnblockTime+0x16>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <prvResetNextTaskUnblockTime+0x48>)
 80047d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047de:	e008      	b.n	80047f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <prvResetNextTaskUnblockTime+0x44>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4a05      	ldr	r2, [pc, #20]	; (8004804 <prvResetNextTaskUnblockTime+0x48>)
 80047f0:	6013      	str	r3, [r2, #0]
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000c98 	.word	0x20000c98
 8004804:	20000d00 	.word	0x20000d00

08004808 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <xTaskGetSchedulerState+0x34>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004816:	2301      	movs	r3, #1
 8004818:	607b      	str	r3, [r7, #4]
 800481a:	e008      	b.n	800482e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800481c:	4b08      	ldr	r3, [pc, #32]	; (8004840 <xTaskGetSchedulerState+0x38>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004824:	2302      	movs	r3, #2
 8004826:	607b      	str	r3, [r7, #4]
 8004828:	e001      	b.n	800482e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800482e:	687b      	ldr	r3, [r7, #4]
	}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	20000cec 	.word	0x20000cec
 8004840:	20000d08 	.word	0x20000d08

08004844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d056      	beq.n	8004908 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800485a:	4b2e      	ldr	r3, [pc, #184]	; (8004914 <xTaskPriorityDisinherit+0xd0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	429a      	cmp	r2, r3
 8004862:	d00a      	beq.n	800487a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	60fb      	str	r3, [r7, #12]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60bb      	str	r3, [r7, #8]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d02c      	beq.n	8004908 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d128      	bne.n	8004908 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fc4a 	bl	8003154 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <xTaskPriorityDisinherit+0xd4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d903      	bls.n	80048e8 <xTaskPriorityDisinherit+0xa4>
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <xTaskPriorityDisinherit+0xd4>)
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a09      	ldr	r2, [pc, #36]	; (800491c <xTaskPriorityDisinherit+0xd8>)
 80048f6:	441a      	add	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7fe fbcb 	bl	800309a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004908:	697b      	ldr	r3, [r7, #20]
	}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	2000080c 	.word	0x2000080c
 8004918:	20000ce8 	.word	0x20000ce8
 800491c:	20000810 	.word	0x20000810

08004920 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800492a:	4b21      	ldr	r3, [pc, #132]	; (80049b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004930:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3304      	adds	r3, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe fc0c 	bl	8003154 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004942:	d10a      	bne.n	800495a <prvAddCurrentTaskToDelayedList+0x3a>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800494a:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	4819      	ldr	r0, [pc, #100]	; (80049b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004954:	f7fe fba1 	bl	800309a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004958:	e026      	b.n	80049a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4413      	add	r3, r2
 8004960:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004962:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	429a      	cmp	r2, r3
 8004970:	d209      	bcs.n	8004986 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f7fe fbaf 	bl	80030e2 <vListInsert>
}
 8004984:	e010      	b.n	80049a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f7fe fba5 	bl	80030e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d202      	bcs.n	80049a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049a2:	4a08      	ldr	r2, [pc, #32]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6013      	str	r3, [r2, #0]
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000ce4 	.word	0x20000ce4
 80049b4:	2000080c 	.word	0x2000080c
 80049b8:	20000ccc 	.word	0x20000ccc
 80049bc:	20000c9c 	.word	0x20000c9c
 80049c0:	20000c98 	.word	0x20000c98
 80049c4:	20000d00 	.word	0x20000d00

080049c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049d2:	f000 facb 	bl	8004f6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049d6:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <xTimerCreateTimerTask+0x80>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d021      	beq.n	8004a22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049e6:	1d3a      	adds	r2, r7, #4
 80049e8:	f107 0108 	add.w	r1, r7, #8
 80049ec:	f107 030c 	add.w	r3, r7, #12
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe fb0b 	bl	800300c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	9202      	str	r2, [sp, #8]
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	2302      	movs	r3, #2
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2300      	movs	r3, #0
 8004a06:	460a      	mov	r2, r1
 8004a08:	4910      	ldr	r1, [pc, #64]	; (8004a4c <xTimerCreateTimerTask+0x84>)
 8004a0a:	4811      	ldr	r0, [pc, #68]	; (8004a50 <xTimerCreateTimerTask+0x88>)
 8004a0c:	f7ff f8b2 	bl	8003b74 <xTaskCreateStatic>
 8004a10:	4603      	mov	r3, r0
 8004a12:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <xTimerCreateTimerTask+0x8c>)
 8004a14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <xTimerCreateTimerTask+0x8c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	613b      	str	r3, [r7, #16]
}
 8004a3a:	bf00      	nop
 8004a3c:	e7fe      	b.n	8004a3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a3e:	697b      	ldr	r3, [r7, #20]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000d3c 	.word	0x20000d3c
 8004a4c:	08005a6c 	.word	0x08005a6c
 8004a50:	08004b75 	.word	0x08004b75
 8004a54:	20000d40 	.word	0x20000d40

08004a58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	623b      	str	r3, [r7, #32]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a86:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <xTimerGenericCommand+0x98>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02a      	beq.n	8004ae4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b05      	cmp	r3, #5
 8004a9e:	dc18      	bgt.n	8004ad2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004aa0:	f7ff feb2 	bl	8004808 <xTaskGetSchedulerState>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d109      	bne.n	8004abe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <xTimerGenericCommand+0x98>)
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	f107 0110 	add.w	r1, r7, #16
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab6:	f7fe fc79 	bl	80033ac <xQueueGenericSend>
 8004aba:	6278      	str	r0, [r7, #36]	; 0x24
 8004abc:	e012      	b.n	8004ae4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <xTimerGenericCommand+0x98>)
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	f107 0110 	add.w	r1, r7, #16
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f7fe fc6f 	bl	80033ac <xQueueGenericSend>
 8004ace:	6278      	str	r0, [r7, #36]	; 0x24
 8004ad0:	e008      	b.n	8004ae4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ad2:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <xTimerGenericCommand+0x98>)
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	f107 0110 	add.w	r1, r7, #16
 8004ada:	2300      	movs	r3, #0
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	f7fe fd63 	bl	80035a8 <xQueueGenericSendFromISR>
 8004ae2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3728      	adds	r7, #40	; 0x28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000d3c 	.word	0x20000d3c

08004af4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004afe:	4b1c      	ldr	r3, [pc, #112]	; (8004b70 <prvProcessExpiredTimer+0x7c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fe fb21 	bl	8003154 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d122      	bne.n	8004b60 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	18d1      	adds	r1, r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	6978      	ldr	r0, [r7, #20]
 8004b28:	f000 f8c8 	bl	8004cbc <prvInsertTimerInActiveList>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b32:	2300      	movs	r3, #0
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	2300      	movs	r3, #0
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	6978      	ldr	r0, [r7, #20]
 8004b3e:	f7ff ff8b 	bl	8004a58 <xTimerGenericCommand>
 8004b42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60fb      	str	r3, [r7, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	6978      	ldr	r0, [r7, #20]
 8004b66:	4798      	blx	r3
}
 8004b68:	bf00      	nop
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000d34 	.word	0x20000d34

08004b74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b7c:	f107 0308 	add.w	r3, r7, #8
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f857 	bl	8004c34 <prvGetNextExpireTime>
 8004b86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f803 	bl	8004b98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b92:	f000 f8d5 	bl	8004d40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b96:	e7f1      	b.n	8004b7c <prvTimerTask+0x8>

08004b98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ba2:	f7ff fa3b 	bl	800401c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ba6:	f107 0308 	add.w	r3, r7, #8
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f866 	bl	8004c7c <prvSampleTimeNow>
 8004bb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d130      	bne.n	8004c1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10a      	bne.n	8004bd4 <prvProcessTimerOrBlockTask+0x3c>
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d806      	bhi.n	8004bd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bc6:	f7ff fa37 	bl	8004038 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ff91 	bl	8004af4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bd2:	e024      	b.n	8004c1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <prvProcessTimerOrBlockTask+0x90>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <prvProcessTimerOrBlockTask+0x94>)
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	f7fe ff87 	bl	8003b0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bfe:	f7ff fa1b 	bl	8004038 <xTaskResumeAll>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <prvProcessTimerOrBlockTask+0x98>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
}
 8004c18:	e001      	b.n	8004c1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c1a:	f7ff fa0d 	bl	8004038 <xTaskResumeAll>
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000d38 	.word	0x20000d38
 8004c2c:	20000d3c 	.word	0x20000d3c
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <prvGetNextExpireTime+0x44>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d105      	bne.n	8004c66 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <prvGetNextExpireTime+0x44>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e001      	b.n	8004c6a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000d34 	.word	0x20000d34

08004c7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c84:	f7ff fa76 	bl	8004174 <xTaskGetTickCount>
 8004c88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <prvSampleTimeNow+0x3c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d205      	bcs.n	8004ca0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c94:	f000 f908 	bl	8004ea8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e002      	b.n	8004ca6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ca6:	4a04      	ldr	r2, [pc, #16]	; (8004cb8 <prvSampleTimeNow+0x3c>)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000d44 	.word	0x20000d44

08004cbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d812      	bhi.n	8004d08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	1ad2      	subs	r2, r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d302      	bcc.n	8004cf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	e01b      	b.n	8004d2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <prvInsertTimerInActiveList+0x7c>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7fe f9ee 	bl	80030e2 <vListInsert>
 8004d06:	e012      	b.n	8004d2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d206      	bcs.n	8004d1e <prvInsertTimerInActiveList+0x62>
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d302      	bcc.n	8004d1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	e007      	b.n	8004d2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d1e:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <prvInsertTimerInActiveList+0x80>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f7fe f9da 	bl	80030e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d2e:	697b      	ldr	r3, [r7, #20]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	20000d38 	.word	0x20000d38
 8004d3c:	20000d34 	.word	0x20000d34

08004d40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08e      	sub	sp, #56	; 0x38
 8004d44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d46:	e09d      	b.n	8004e84 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	da18      	bge.n	8004d80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d4e:	1d3b      	adds	r3, r7, #4
 8004d50:	3304      	adds	r3, #4
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	61fb      	str	r3, [r7, #28]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d76:	6850      	ldr	r0, [r2, #4]
 8004d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d7a:	6892      	ldr	r2, [r2, #8]
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	db7d      	blt.n	8004e82 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d004      	beq.n	8004d9c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	3304      	adds	r3, #4
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe f9dc 	bl	8003154 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff ff6c 	bl	8004c7c <prvSampleTimeNow>
 8004da4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b09      	cmp	r3, #9
 8004daa:	d86b      	bhi.n	8004e84 <prvProcessReceivedCommands+0x144>
 8004dac:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <prvProcessReceivedCommands+0x74>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004ddd 	.word	0x08004ddd
 8004dbc:	08004ddd 	.word	0x08004ddd
 8004dc0:	08004e85 	.word	0x08004e85
 8004dc4:	08004e39 	.word	0x08004e39
 8004dc8:	08004e71 	.word	0x08004e71
 8004dcc:	08004ddd 	.word	0x08004ddd
 8004dd0:	08004ddd 	.word	0x08004ddd
 8004dd4:	08004e85 	.word	0x08004e85
 8004dd8:	08004e39 	.word	0x08004e39
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	18d1      	adds	r1, r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dea:	f7ff ff67 	bl	8004cbc <prvInsertTimerInActiveList>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d047      	beq.n	8004e84 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dfa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d13f      	bne.n	8004e84 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2300      	movs	r3, #0
 8004e12:	2100      	movs	r1, #0
 8004e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e16:	f7ff fe1f 	bl	8004a58 <xTimerGenericCommand>
 8004e1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d130      	bne.n	8004e84 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	61bb      	str	r3, [r7, #24]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10a      	bne.n	8004e5c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	617b      	str	r3, [r7, #20]
}
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	699a      	ldr	r2, [r3, #24]
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	18d1      	adds	r1, r2, r3
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e6a:	f7ff ff27 	bl	8004cbc <prvInsertTimerInActiveList>
					break;
 8004e6e:	e009      	b.n	8004e84 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d104      	bne.n	8004e84 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7c:	f000 fbc8 	bl	8005610 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e80:	e000      	b.n	8004e84 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e82:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e84:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <prvProcessReceivedCommands+0x164>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	1d39      	adds	r1, r7, #4
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe fc23 	bl	80036d8 <xQueueReceive>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f47f af57 	bne.w	8004d48 <prvProcessReceivedCommands+0x8>
	}
}
 8004e9a:	bf00      	nop
 8004e9c:	bf00      	nop
 8004e9e:	3730      	adds	r7, #48	; 0x30
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000d3c 	.word	0x20000d3c

08004ea8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eae:	e045      	b.n	8004f3c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eb0:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <prvSwitchTimerLists+0xbc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eba:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <prvSwitchTimerLists+0xbc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fe f943 	bl	8003154 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d12e      	bne.n	8004f3c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d90e      	bls.n	8004f0e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <prvSwitchTimerLists+0xbc>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f7fe f8eb 	bl	80030e2 <vListInsert>
 8004f0c:	e016      	b.n	8004f3c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	2100      	movs	r1, #0
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff fd9d 	bl	8004a58 <xTimerGenericCommand>
 8004f1e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <prvSwitchTimerLists+0x94>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	603b      	str	r3, [r7, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <prvSwitchTimerLists+0xbc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1b4      	bne.n	8004eb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <prvSwitchTimerLists+0xbc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <prvSwitchTimerLists+0xc0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a04      	ldr	r2, [pc, #16]	; (8004f64 <prvSwitchTimerLists+0xbc>)
 8004f52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f54:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <prvSwitchTimerLists+0xc0>)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	6013      	str	r3, [r2, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000d34 	.word	0x20000d34
 8004f68:	20000d38 	.word	0x20000d38

08004f6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f72:	f000 f967 	bl	8005244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f76:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <prvCheckForValidListAndQueue+0x60>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d120      	bne.n	8004fc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f7e:	4814      	ldr	r0, [pc, #80]	; (8004fd0 <prvCheckForValidListAndQueue+0x64>)
 8004f80:	f7fe f85e 	bl	8003040 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f84:	4813      	ldr	r0, [pc, #76]	; (8004fd4 <prvCheckForValidListAndQueue+0x68>)
 8004f86:	f7fe f85b 	bl	8003040 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <prvCheckForValidListAndQueue+0x6c>)
 8004f8c:	4a10      	ldr	r2, [pc, #64]	; (8004fd0 <prvCheckForValidListAndQueue+0x64>)
 8004f8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f90:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <prvCheckForValidListAndQueue+0x70>)
 8004f92:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <prvCheckForValidListAndQueue+0x68>)
 8004f94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f96:	2300      	movs	r3, #0
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <prvCheckForValidListAndQueue+0x74>)
 8004f9c:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <prvCheckForValidListAndQueue+0x78>)
 8004f9e:	2110      	movs	r1, #16
 8004fa0:	200a      	movs	r0, #10
 8004fa2:	f7fe f969 	bl	8003278 <xQueueGenericCreateStatic>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4a08      	ldr	r2, [pc, #32]	; (8004fcc <prvCheckForValidListAndQueue+0x60>)
 8004faa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fac:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <prvCheckForValidListAndQueue+0x60>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <prvCheckForValidListAndQueue+0x60>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	490b      	ldr	r1, [pc, #44]	; (8004fe8 <prvCheckForValidListAndQueue+0x7c>)
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe fd7c 	bl	8003ab8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fc0:	f000 f970 	bl	80052a4 <vPortExitCritical>
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000d3c 	.word	0x20000d3c
 8004fd0:	20000d0c 	.word	0x20000d0c
 8004fd4:	20000d20 	.word	0x20000d20
 8004fd8:	20000d34 	.word	0x20000d34
 8004fdc:	20000d38 	.word	0x20000d38
 8004fe0:	20000de8 	.word	0x20000de8
 8004fe4:	20000d48 	.word	0x20000d48
 8004fe8:	08005a74 	.word	0x08005a74

08004fec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3b04      	subs	r3, #4
 8004ffc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3b04      	subs	r3, #4
 800500a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f023 0201 	bic.w	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3b04      	subs	r3, #4
 800501a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800501c:	4a0c      	ldr	r2, [pc, #48]	; (8005050 <pxPortInitialiseStack+0x64>)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3b14      	subs	r3, #20
 8005026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3b04      	subs	r3, #4
 8005032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f06f 0202 	mvn.w	r2, #2
 800503a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3b20      	subs	r3, #32
 8005040:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005042:	68fb      	ldr	r3, [r7, #12]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr
 8005050:	08005055 	.word	0x08005055

08005054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <prvTaskExitError+0x54>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005066:	d00a      	beq.n	800507e <prvTaskExitError+0x2a>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	60fb      	str	r3, [r7, #12]
}
 800507a:	bf00      	nop
 800507c:	e7fe      	b.n	800507c <prvTaskExitError+0x28>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	60bb      	str	r3, [r7, #8]
}
 8005090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005092:	bf00      	nop
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0fc      	beq.n	8005094 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	2000000c 	.word	0x2000000c
 80050ac:	00000000 	.word	0x00000000

080050b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <pxCurrentTCBConst2>)
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	6808      	ldr	r0, [r1, #0]
 80050b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ba:	f380 8809 	msr	PSP, r0
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f380 8811 	msr	BASEPRI, r0
 80050ca:	4770      	bx	lr
 80050cc:	f3af 8000 	nop.w

080050d0 <pxCurrentTCBConst2>:
 80050d0:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop

080050d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050d8:	4808      	ldr	r0, [pc, #32]	; (80050fc <prvPortStartFirstTask+0x24>)
 80050da:	6800      	ldr	r0, [r0, #0]
 80050dc:	6800      	ldr	r0, [r0, #0]
 80050de:	f380 8808 	msr	MSP, r0
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f380 8814 	msr	CONTROL, r0
 80050ea:	b662      	cpsie	i
 80050ec:	b661      	cpsie	f
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	df00      	svc	0
 80050f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050fa:	bf00      	nop
 80050fc:	e000ed08 	.word	0xe000ed08

08005100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005106:	4b46      	ldr	r3, [pc, #280]	; (8005220 <xPortStartScheduler+0x120>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a46      	ldr	r2, [pc, #280]	; (8005224 <xPortStartScheduler+0x124>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d10a      	bne.n	8005126 <xPortStartScheduler+0x26>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	613b      	str	r3, [r7, #16]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005126:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <xPortStartScheduler+0x120>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a3f      	ldr	r2, [pc, #252]	; (8005228 <xPortStartScheduler+0x128>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d10a      	bne.n	8005146 <xPortStartScheduler+0x46>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60fb      	str	r3, [r7, #12]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005146:	4b39      	ldr	r3, [pc, #228]	; (800522c <xPortStartScheduler+0x12c>)
 8005148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	22ff      	movs	r2, #255	; 0xff
 8005156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005168:	b2da      	uxtb	r2, r3
 800516a:	4b31      	ldr	r3, [pc, #196]	; (8005230 <xPortStartScheduler+0x130>)
 800516c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800516e:	4b31      	ldr	r3, [pc, #196]	; (8005234 <xPortStartScheduler+0x134>)
 8005170:	2207      	movs	r2, #7
 8005172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005174:	e009      	b.n	800518a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005176:	4b2f      	ldr	r3, [pc, #188]	; (8005234 <xPortStartScheduler+0x134>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3b01      	subs	r3, #1
 800517c:	4a2d      	ldr	r2, [pc, #180]	; (8005234 <xPortStartScheduler+0x134>)
 800517e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	b2db      	uxtb	r3, r3
 8005188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005192:	2b80      	cmp	r3, #128	; 0x80
 8005194:	d0ef      	beq.n	8005176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005196:	4b27      	ldr	r3, [pc, #156]	; (8005234 <xPortStartScheduler+0x134>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f1c3 0307 	rsb	r3, r3, #7
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d00a      	beq.n	80051b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	60bb      	str	r3, [r7, #8]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051b8:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <xPortStartScheduler+0x134>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <xPortStartScheduler+0x134>)
 80051c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051c2:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <xPortStartScheduler+0x134>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ca:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <xPortStartScheduler+0x134>)
 80051cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051d6:	4b18      	ldr	r3, [pc, #96]	; (8005238 <xPortStartScheduler+0x138>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a17      	ldr	r2, [pc, #92]	; (8005238 <xPortStartScheduler+0x138>)
 80051dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <xPortStartScheduler+0x138>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a14      	ldr	r2, [pc, #80]	; (8005238 <xPortStartScheduler+0x138>)
 80051e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051ee:	f000 f8dd 	bl	80053ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <xPortStartScheduler+0x13c>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051f8:	f000 f8fc 	bl	80053f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <xPortStartScheduler+0x140>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0f      	ldr	r2, [pc, #60]	; (8005240 <xPortStartScheduler+0x140>)
 8005202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005208:	f7ff ff66 	bl	80050d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800520c:	f7ff f880 	bl	8004310 <vTaskSwitchContext>
	prvTaskExitError();
 8005210:	f7ff ff20 	bl	8005054 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	e000ed00 	.word	0xe000ed00
 8005224:	410fc271 	.word	0x410fc271
 8005228:	410fc270 	.word	0x410fc270
 800522c:	e000e400 	.word	0xe000e400
 8005230:	20000e38 	.word	0x20000e38
 8005234:	20000e3c 	.word	0x20000e3c
 8005238:	e000ed20 	.word	0xe000ed20
 800523c:	2000000c 	.word	0x2000000c
 8005240:	e000ef34 	.word	0xe000ef34

08005244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	607b      	str	r3, [r7, #4]
}
 800525c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800525e:	4b0f      	ldr	r3, [pc, #60]	; (800529c <vPortEnterCritical+0x58>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	4a0d      	ldr	r2, [pc, #52]	; (800529c <vPortEnterCritical+0x58>)
 8005266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <vPortEnterCritical+0x58>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10f      	bne.n	8005290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <vPortEnterCritical+0x5c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <vPortEnterCritical+0x4c>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	603b      	str	r3, [r7, #0]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <vPortEnterCritical+0x4a>
	}
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	2000000c 	.word	0x2000000c
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052aa:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <vPortExitCritical+0x50>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <vPortExitCritical+0x24>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	607b      	str	r3, [r7, #4]
}
 80052c4:	bf00      	nop
 80052c6:	e7fe      	b.n	80052c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <vPortExitCritical+0x50>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <vPortExitCritical+0x50>)
 80052d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <vPortExitCritical+0x50>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d105      	bne.n	80052e6 <vPortExitCritical+0x42>
 80052da:	2300      	movs	r3, #0
 80052dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	f383 8811 	msr	BASEPRI, r3
}
 80052e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c
	...

08005300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005300:	f3ef 8009 	mrs	r0, PSP
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <pxCurrentTCBConst>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	f01e 0f10 	tst.w	lr, #16
 8005310:	bf08      	it	eq
 8005312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531a:	6010      	str	r0, [r2, #0]
 800531c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005324:	f380 8811 	msr	BASEPRI, r0
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f7fe ffee 	bl	8004310 <vTaskSwitchContext>
 8005334:	f04f 0000 	mov.w	r0, #0
 8005338:	f380 8811 	msr	BASEPRI, r0
 800533c:	bc09      	pop	{r0, r3}
 800533e:	6819      	ldr	r1, [r3, #0]
 8005340:	6808      	ldr	r0, [r1, #0]
 8005342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005346:	f01e 0f10 	tst.w	lr, #16
 800534a:	bf08      	it	eq
 800534c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005350:	f380 8809 	msr	PSP, r0
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst>:
 8005360:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	607b      	str	r3, [r7, #4]
}
 8005380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005382:	f7fe ff07 	bl	8004194 <xTaskIncrementTick>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <SysTick_Handler+0x40>)
 800538e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	2300      	movs	r3, #0
 8005396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f383 8811 	msr	BASEPRI, r3
}
 800539e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053b0:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <vPortSetupTimerInterrupt+0x34>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053b6:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <vPortSetupTimerInterrupt+0x38>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <vPortSetupTimerInterrupt+0x3c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <vPortSetupTimerInterrupt+0x40>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	099b      	lsrs	r3, r3, #6
 80053c8:	4a09      	ldr	r2, [pc, #36]	; (80053f0 <vPortSetupTimerInterrupt+0x44>)
 80053ca:	3b01      	subs	r3, #1
 80053cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ce:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <vPortSetupTimerInterrupt+0x34>)
 80053d0:	2207      	movs	r2, #7
 80053d2:	601a      	str	r2, [r3, #0]
}
 80053d4:	bf00      	nop
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	e000e010 	.word	0xe000e010
 80053e4:	e000e018 	.word	0xe000e018
 80053e8:	20000000 	.word	0x20000000
 80053ec:	10624dd3 	.word	0x10624dd3
 80053f0:	e000e014 	.word	0xe000e014

080053f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005404 <vPortEnableVFP+0x10>
 80053f8:	6801      	ldr	r1, [r0, #0]
 80053fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053fe:	6001      	str	r1, [r0, #0]
 8005400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005402:	bf00      	nop
 8005404:	e000ed88 	.word	0xe000ed88

08005408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800540e:	f3ef 8305 	mrs	r3, IPSR
 8005412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b0f      	cmp	r3, #15
 8005418:	d914      	bls.n	8005444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800541a:	4a17      	ldr	r2, [pc, #92]	; (8005478 <vPortValidateInterruptPriority+0x70>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005424:	4b15      	ldr	r3, [pc, #84]	; (800547c <vPortValidateInterruptPriority+0x74>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	7afa      	ldrb	r2, [r7, #11]
 800542a:	429a      	cmp	r2, r3
 800542c:	d20a      	bcs.n	8005444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	607b      	str	r3, [r7, #4]
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005444:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <vPortValidateInterruptPriority+0x78>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800544c:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <vPortValidateInterruptPriority+0x7c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d90a      	bls.n	800546a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	603b      	str	r3, [r7, #0]
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <vPortValidateInterruptPriority+0x60>
	}
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	e000e3f0 	.word	0xe000e3f0
 800547c:	20000e38 	.word	0x20000e38
 8005480:	e000ed0c 	.word	0xe000ed0c
 8005484:	20000e3c 	.word	0x20000e3c

08005488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005494:	f7fe fdc2 	bl	800401c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005498:	4b58      	ldr	r3, [pc, #352]	; (80055fc <pvPortMalloc+0x174>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054a0:	f000 f910 	bl	80056c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054a4:	4b56      	ldr	r3, [pc, #344]	; (8005600 <pvPortMalloc+0x178>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 808e 	bne.w	80055ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01d      	beq.n	80054f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80054b8:	2208      	movs	r2, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d014      	beq.n	80054f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f023 0307 	bic.w	r3, r3, #7
 80054d0:	3308      	adds	r3, #8
 80054d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <pvPortMalloc+0x6c>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	617b      	str	r3, [r7, #20]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d069      	beq.n	80055ce <pvPortMalloc+0x146>
 80054fa:	4b42      	ldr	r3, [pc, #264]	; (8005604 <pvPortMalloc+0x17c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	429a      	cmp	r2, r3
 8005502:	d864      	bhi.n	80055ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005504:	4b40      	ldr	r3, [pc, #256]	; (8005608 <pvPortMalloc+0x180>)
 8005506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005508:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <pvPortMalloc+0x180>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800550e:	e004      	b.n	800551a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d903      	bls.n	800552c <pvPortMalloc+0xa4>
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f1      	bne.n	8005510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800552c:	4b33      	ldr	r3, [pc, #204]	; (80055fc <pvPortMalloc+0x174>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005532:	429a      	cmp	r2, r3
 8005534:	d04b      	beq.n	80055ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2208      	movs	r2, #8
 800553c:	4413      	add	r3, r2
 800553e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	2308      	movs	r3, #8
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	429a      	cmp	r2, r3
 8005556:	d91f      	bls.n	8005598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <pvPortMalloc+0xf8>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	613b      	str	r3, [r7, #16]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005592:	69b8      	ldr	r0, [r7, #24]
 8005594:	f000 f8f8 	bl	8005788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005598:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <pvPortMalloc+0x17c>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	4a18      	ldr	r2, [pc, #96]	; (8005604 <pvPortMalloc+0x17c>)
 80055a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <pvPortMalloc+0x17c>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <pvPortMalloc+0x184>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d203      	bcs.n	80055ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055b2:	4b14      	ldr	r3, [pc, #80]	; (8005604 <pvPortMalloc+0x17c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a15      	ldr	r2, [pc, #84]	; (800560c <pvPortMalloc+0x184>)
 80055b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	4b10      	ldr	r3, [pc, #64]	; (8005600 <pvPortMalloc+0x178>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055ce:	f7fe fd33 	bl	8004038 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <pvPortMalloc+0x16a>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <pvPortMalloc+0x168>
	return pvReturn;
 80055f2:	69fb      	ldr	r3, [r7, #28]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3728      	adds	r7, #40	; 0x28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20001a48 	.word	0x20001a48
 8005600:	20001a54 	.word	0x20001a54
 8005604:	20001a4c 	.word	0x20001a4c
 8005608:	20001a40 	.word	0x20001a40
 800560c:	20001a50 	.word	0x20001a50

08005610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d048      	beq.n	80056b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005622:	2308      	movs	r3, #8
 8005624:	425b      	negs	r3, r3
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4413      	add	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	4b21      	ldr	r3, [pc, #132]	; (80056bc <vPortFree+0xac>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10a      	bne.n	8005654 <vPortFree+0x44>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	60fb      	str	r3, [r7, #12]
}
 8005650:	bf00      	nop
 8005652:	e7fe      	b.n	8005652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <vPortFree+0x62>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	60bb      	str	r3, [r7, #8]
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	4b11      	ldr	r3, [pc, #68]	; (80056bc <vPortFree+0xac>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4013      	ands	r3, r2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d019      	beq.n	80056b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d115      	bne.n	80056b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <vPortFree+0xac>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	43db      	mvns	r3, r3
 8005692:	401a      	ands	r2, r3
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005698:	f7fe fcc0 	bl	800401c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <vPortFree+0xb0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4413      	add	r3, r2
 80056a6:	4a06      	ldr	r2, [pc, #24]	; (80056c0 <vPortFree+0xb0>)
 80056a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056aa:	6938      	ldr	r0, [r7, #16]
 80056ac:	f000 f86c 	bl	8005788 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056b0:	f7fe fcc2 	bl	8004038 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056b4:	bf00      	nop
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20001a54 	.word	0x20001a54
 80056c0:	20001a4c 	.word	0x20001a4c

080056c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056d0:	4b27      	ldr	r3, [pc, #156]	; (8005770 <prvHeapInit+0xac>)
 80056d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3307      	adds	r3, #7
 80056e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0307 	bic.w	r3, r3, #7
 80056ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <prvHeapInit+0xac>)
 80056f4:	4413      	add	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <prvHeapInit+0xb0>)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005702:	4b1c      	ldr	r3, [pc, #112]	; (8005774 <prvHeapInit+0xb0>)
 8005704:	2200      	movs	r2, #0
 8005706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	4413      	add	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005710:	2208      	movs	r2, #8
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0307 	bic.w	r3, r3, #7
 800571e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4a15      	ldr	r2, [pc, #84]	; (8005778 <prvHeapInit+0xb4>)
 8005724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <prvHeapInit+0xb4>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2200      	movs	r2, #0
 800572c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <prvHeapInit+0xb4>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	1ad2      	subs	r2, r2, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005744:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <prvHeapInit+0xb4>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4a0a      	ldr	r2, [pc, #40]	; (800577c <prvHeapInit+0xb8>)
 8005752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4a09      	ldr	r2, [pc, #36]	; (8005780 <prvHeapInit+0xbc>)
 800575a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800575c:	4b09      	ldr	r3, [pc, #36]	; (8005784 <prvHeapInit+0xc0>)
 800575e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005762:	601a      	str	r2, [r3, #0]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	20000e40 	.word	0x20000e40
 8005774:	20001a40 	.word	0x20001a40
 8005778:	20001a48 	.word	0x20001a48
 800577c:	20001a50 	.word	0x20001a50
 8005780:	20001a4c 	.word	0x20001a4c
 8005784:	20001a54 	.word	0x20001a54

08005788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005790:	4b28      	ldr	r3, [pc, #160]	; (8005834 <prvInsertBlockIntoFreeList+0xac>)
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	e002      	b.n	800579c <prvInsertBlockIntoFreeList+0x14>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d8f7      	bhi.n	8005796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4413      	add	r3, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d108      	bne.n	80057ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	441a      	add	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	441a      	add	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d118      	bne.n	8005810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b15      	ldr	r3, [pc, #84]	; (8005838 <prvInsertBlockIntoFreeList+0xb0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d00d      	beq.n	8005806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	441a      	add	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	e008      	b.n	8005818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005806:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <prvInsertBlockIntoFreeList+0xb0>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	e003      	b.n	8005818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	429a      	cmp	r2, r3
 800581e:	d002      	beq.n	8005826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20001a40 	.word	0x20001a40
 8005838:	20001a48 	.word	0x20001a48

0800583c <__libc_init_array>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4d0d      	ldr	r5, [pc, #52]	; (8005874 <__libc_init_array+0x38>)
 8005840:	4c0d      	ldr	r4, [pc, #52]	; (8005878 <__libc_init_array+0x3c>)
 8005842:	1b64      	subs	r4, r4, r5
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	2600      	movs	r6, #0
 8005848:	42a6      	cmp	r6, r4
 800584a:	d109      	bne.n	8005860 <__libc_init_array+0x24>
 800584c:	4d0b      	ldr	r5, [pc, #44]	; (800587c <__libc_init_array+0x40>)
 800584e:	4c0c      	ldr	r4, [pc, #48]	; (8005880 <__libc_init_array+0x44>)
 8005850:	f000 f8f6 	bl	8005a40 <_init>
 8005854:	1b64      	subs	r4, r4, r5
 8005856:	10a4      	asrs	r4, r4, #2
 8005858:	2600      	movs	r6, #0
 800585a:	42a6      	cmp	r6, r4
 800585c:	d105      	bne.n	800586a <__libc_init_array+0x2e>
 800585e:	bd70      	pop	{r4, r5, r6, pc}
 8005860:	f855 3b04 	ldr.w	r3, [r5], #4
 8005864:	4798      	blx	r3
 8005866:	3601      	adds	r6, #1
 8005868:	e7ee      	b.n	8005848 <__libc_init_array+0xc>
 800586a:	f855 3b04 	ldr.w	r3, [r5], #4
 800586e:	4798      	blx	r3
 8005870:	3601      	adds	r6, #1
 8005872:	e7f2      	b.n	800585a <__libc_init_array+0x1e>
 8005874:	08005b38 	.word	0x08005b38
 8005878:	08005b38 	.word	0x08005b38
 800587c:	08005b38 	.word	0x08005b38
 8005880:	08005b3c 	.word	0x08005b3c

08005884 <__retarget_lock_acquire_recursive>:
 8005884:	4770      	bx	lr

08005886 <__retarget_lock_release_recursive>:
 8005886:	4770      	bx	lr

08005888 <memcpy>:
 8005888:	440a      	add	r2, r1
 800588a:	4291      	cmp	r1, r2
 800588c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005890:	d100      	bne.n	8005894 <memcpy+0xc>
 8005892:	4770      	bx	lr
 8005894:	b510      	push	{r4, lr}
 8005896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800589a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589e:	4291      	cmp	r1, r2
 80058a0:	d1f9      	bne.n	8005896 <memcpy+0xe>
 80058a2:	bd10      	pop	{r4, pc}

080058a4 <memset>:
 80058a4:	4402      	add	r2, r0
 80058a6:	4603      	mov	r3, r0
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d100      	bne.n	80058ae <memset+0xa>
 80058ac:	4770      	bx	lr
 80058ae:	f803 1b01 	strb.w	r1, [r3], #1
 80058b2:	e7f9      	b.n	80058a8 <memset+0x4>

080058b4 <cleanup_glue>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	460c      	mov	r4, r1
 80058b8:	6809      	ldr	r1, [r1, #0]
 80058ba:	4605      	mov	r5, r0
 80058bc:	b109      	cbz	r1, 80058c2 <cleanup_glue+0xe>
 80058be:	f7ff fff9 	bl	80058b4 <cleanup_glue>
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058ca:	f000 b869 	b.w	80059a0 <_free_r>
	...

080058d0 <_reclaim_reent>:
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <_reclaim_reent+0xb4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4283      	cmp	r3, r0
 80058d6:	b570      	push	{r4, r5, r6, lr}
 80058d8:	4604      	mov	r4, r0
 80058da:	d051      	beq.n	8005980 <_reclaim_reent+0xb0>
 80058dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80058de:	b143      	cbz	r3, 80058f2 <_reclaim_reent+0x22>
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d14a      	bne.n	800597c <_reclaim_reent+0xac>
 80058e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058e8:	6819      	ldr	r1, [r3, #0]
 80058ea:	b111      	cbz	r1, 80058f2 <_reclaim_reent+0x22>
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 f857 	bl	80059a0 <_free_r>
 80058f2:	6961      	ldr	r1, [r4, #20]
 80058f4:	b111      	cbz	r1, 80058fc <_reclaim_reent+0x2c>
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 f852 	bl	80059a0 <_free_r>
 80058fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80058fe:	b111      	cbz	r1, 8005906 <_reclaim_reent+0x36>
 8005900:	4620      	mov	r0, r4
 8005902:	f000 f84d 	bl	80059a0 <_free_r>
 8005906:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005908:	b111      	cbz	r1, 8005910 <_reclaim_reent+0x40>
 800590a:	4620      	mov	r0, r4
 800590c:	f000 f848 	bl	80059a0 <_free_r>
 8005910:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005912:	b111      	cbz	r1, 800591a <_reclaim_reent+0x4a>
 8005914:	4620      	mov	r0, r4
 8005916:	f000 f843 	bl	80059a0 <_free_r>
 800591a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800591c:	b111      	cbz	r1, 8005924 <_reclaim_reent+0x54>
 800591e:	4620      	mov	r0, r4
 8005920:	f000 f83e 	bl	80059a0 <_free_r>
 8005924:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005926:	b111      	cbz	r1, 800592e <_reclaim_reent+0x5e>
 8005928:	4620      	mov	r0, r4
 800592a:	f000 f839 	bl	80059a0 <_free_r>
 800592e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005930:	b111      	cbz	r1, 8005938 <_reclaim_reent+0x68>
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f834 	bl	80059a0 <_free_r>
 8005938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800593a:	b111      	cbz	r1, 8005942 <_reclaim_reent+0x72>
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f82f 	bl	80059a0 <_free_r>
 8005942:	69a3      	ldr	r3, [r4, #24]
 8005944:	b1e3      	cbz	r3, 8005980 <_reclaim_reent+0xb0>
 8005946:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005948:	4620      	mov	r0, r4
 800594a:	4798      	blx	r3
 800594c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800594e:	b1b9      	cbz	r1, 8005980 <_reclaim_reent+0xb0>
 8005950:	4620      	mov	r0, r4
 8005952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005956:	f7ff bfad 	b.w	80058b4 <cleanup_glue>
 800595a:	5949      	ldr	r1, [r1, r5]
 800595c:	b941      	cbnz	r1, 8005970 <_reclaim_reent+0xa0>
 800595e:	3504      	adds	r5, #4
 8005960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005962:	2d80      	cmp	r5, #128	; 0x80
 8005964:	68d9      	ldr	r1, [r3, #12]
 8005966:	d1f8      	bne.n	800595a <_reclaim_reent+0x8a>
 8005968:	4620      	mov	r0, r4
 800596a:	f000 f819 	bl	80059a0 <_free_r>
 800596e:	e7ba      	b.n	80058e6 <_reclaim_reent+0x16>
 8005970:	680e      	ldr	r6, [r1, #0]
 8005972:	4620      	mov	r0, r4
 8005974:	f000 f814 	bl	80059a0 <_free_r>
 8005978:	4631      	mov	r1, r6
 800597a:	e7ef      	b.n	800595c <_reclaim_reent+0x8c>
 800597c:	2500      	movs	r5, #0
 800597e:	e7ef      	b.n	8005960 <_reclaim_reent+0x90>
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	bf00      	nop
 8005984:	20000010 	.word	0x20000010

08005988 <__malloc_lock>:
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__malloc_lock+0x8>)
 800598a:	f7ff bf7b 	b.w	8005884 <__retarget_lock_acquire_recursive>
 800598e:	bf00      	nop
 8005990:	20001b9c 	.word	0x20001b9c

08005994 <__malloc_unlock>:
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <__malloc_unlock+0x8>)
 8005996:	f7ff bf76 	b.w	8005886 <__retarget_lock_release_recursive>
 800599a:	bf00      	nop
 800599c:	20001b9c 	.word	0x20001b9c

080059a0 <_free_r>:
 80059a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059a2:	2900      	cmp	r1, #0
 80059a4:	d048      	beq.n	8005a38 <_free_r+0x98>
 80059a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059aa:	9001      	str	r0, [sp, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f1a1 0404 	sub.w	r4, r1, #4
 80059b2:	bfb8      	it	lt
 80059b4:	18e4      	addlt	r4, r4, r3
 80059b6:	f7ff ffe7 	bl	8005988 <__malloc_lock>
 80059ba:	4a20      	ldr	r2, [pc, #128]	; (8005a3c <_free_r+0x9c>)
 80059bc:	9801      	ldr	r0, [sp, #4]
 80059be:	6813      	ldr	r3, [r2, #0]
 80059c0:	4615      	mov	r5, r2
 80059c2:	b933      	cbnz	r3, 80059d2 <_free_r+0x32>
 80059c4:	6063      	str	r3, [r4, #4]
 80059c6:	6014      	str	r4, [r2, #0]
 80059c8:	b003      	add	sp, #12
 80059ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059ce:	f7ff bfe1 	b.w	8005994 <__malloc_unlock>
 80059d2:	42a3      	cmp	r3, r4
 80059d4:	d90b      	bls.n	80059ee <_free_r+0x4e>
 80059d6:	6821      	ldr	r1, [r4, #0]
 80059d8:	1862      	adds	r2, r4, r1
 80059da:	4293      	cmp	r3, r2
 80059dc:	bf04      	itt	eq
 80059de:	681a      	ldreq	r2, [r3, #0]
 80059e0:	685b      	ldreq	r3, [r3, #4]
 80059e2:	6063      	str	r3, [r4, #4]
 80059e4:	bf04      	itt	eq
 80059e6:	1852      	addeq	r2, r2, r1
 80059e8:	6022      	streq	r2, [r4, #0]
 80059ea:	602c      	str	r4, [r5, #0]
 80059ec:	e7ec      	b.n	80059c8 <_free_r+0x28>
 80059ee:	461a      	mov	r2, r3
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b10b      	cbz	r3, 80059f8 <_free_r+0x58>
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d9fa      	bls.n	80059ee <_free_r+0x4e>
 80059f8:	6811      	ldr	r1, [r2, #0]
 80059fa:	1855      	adds	r5, r2, r1
 80059fc:	42a5      	cmp	r5, r4
 80059fe:	d10b      	bne.n	8005a18 <_free_r+0x78>
 8005a00:	6824      	ldr	r4, [r4, #0]
 8005a02:	4421      	add	r1, r4
 8005a04:	1854      	adds	r4, r2, r1
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	6011      	str	r1, [r2, #0]
 8005a0a:	d1dd      	bne.n	80059c8 <_free_r+0x28>
 8005a0c:	681c      	ldr	r4, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	6053      	str	r3, [r2, #4]
 8005a12:	4421      	add	r1, r4
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	e7d7      	b.n	80059c8 <_free_r+0x28>
 8005a18:	d902      	bls.n	8005a20 <_free_r+0x80>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	6003      	str	r3, [r0, #0]
 8005a1e:	e7d3      	b.n	80059c8 <_free_r+0x28>
 8005a20:	6825      	ldr	r5, [r4, #0]
 8005a22:	1961      	adds	r1, r4, r5
 8005a24:	428b      	cmp	r3, r1
 8005a26:	bf04      	itt	eq
 8005a28:	6819      	ldreq	r1, [r3, #0]
 8005a2a:	685b      	ldreq	r3, [r3, #4]
 8005a2c:	6063      	str	r3, [r4, #4]
 8005a2e:	bf04      	itt	eq
 8005a30:	1949      	addeq	r1, r1, r5
 8005a32:	6021      	streq	r1, [r4, #0]
 8005a34:	6054      	str	r4, [r2, #4]
 8005a36:	e7c7      	b.n	80059c8 <_free_r+0x28>
 8005a38:	b003      	add	sp, #12
 8005a3a:	bd30      	pop	{r4, r5, pc}
 8005a3c:	20001a58 	.word	0x20001a58

08005a40 <_init>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr

08005a4c <_fini>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	bf00      	nop
 8005a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a52:	bc08      	pop	{r3}
 8005a54:	469e      	mov	lr, r3
 8005a56:	4770      	bx	lr
